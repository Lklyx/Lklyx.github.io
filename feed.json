{
    "version": "https://jsonfeed.org/version/1",
    "title": "沿岸踱步",
    "subtitle": "成长日记",
    "icon": "https://github.com/Lklyx/Lklyx.github.io/images/favicon.ico",
    "description": "沿岸踱步 & 成长记录",
    "home_page_url": "https://github.com/Lklyx/Lklyx.github.io",
    "items": [
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/%E7%BC%98%E8%B5%B7/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/%E7%BC%98%E8%B5%B7/",
            "title": "缘起 ^_^",
            "date_published": "2022-09-02T01:30:30.121Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<blockquote>\n<p>      传说，在 2500 万年前，一颗带着蓝色火焰的陨石从天而降，此时，有个少年正牧羊回来，顺着河边，沿岸踱步、怡然自得。突然 ......</p>\n<hr>\n<p>哈哈，扯远了。不好意思啊！各位，我是一个学习前端的小小白，很荣幸，我能来到前端的世界，我站在这个陌生而又充满挑战的世界里，一眼望去，有土坡绵延而成的山脉，也有雨滴溪水汇成的江河海洋。可谓是 —— 那啥！忘词了，反正就是啥都有！大学以来，就很喜欢写页面，我读的也是计算机相关的专业。学过的课程也很多， <code>java</code> 、 <code>c++</code> 、 <code>ps</code> 、 <code>综合布线</code> 、 <code>网络协议</code> 、 <code>html</code>  、 <code>css</code> 、 <code>Javascript</code> 。其中最喜欢的就是做网页了。就因为简单，容易上手。写出来就能看得到。尽管如此喜欢，还是一事无成，其他的课程也都学得半斤八两。多多少少了解一点。看得懂，写不出来。浑浑噩噩，三年结束了。等到工作了，才自学了一些东西。在此，和大家分享一下，我有很多不足的地方，希望在接下来的日子里。不断完善。</p>\n</blockquote>\n<h2 id=\"前端开发可能会用到的插件\"><a class=\"anchor\" href=\"#前端开发可能会用到的插件\">#</a> 前端开发可能会用到的插件</h2>\n<blockquote>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvaW5kZXguaHRtbA==\">ECharts </span></p>\n<p>折线图、柱状图、饼状图、热力图、散点图… 等插件。</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3ZhbnQtd2VhcHAvIy9ob21l\">Vant Weapp</span></p>\n<p><em>Vant</em> 插件，<em>vue</em> 和微信小程序都可以使用的<em> ui</em> 组件。</p>\n</li>\n</ol>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%90%9E%E7%AC%91%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——就这？",
            "date_published": "2022-09-02T01:30:30.059Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kdS5zaGFkaWFvLmFwcC8=\">毒鸡汤文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHAuc2hhZGlhby5hcHAv\">彩虹屁文案</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9weXEuc2hhZGlhby5hcHAv\">朋友圈文案</span></p>\n<ol>\n<li>\n<p>上帝说：如果给你 1 分钟的时间，让你打电话給五年前的你，你会对他说些什么？</p>\n<p>我说：给我五分钟吧！我怕那<strong> sb</strong> 不信。</p>\n</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%80%95%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E5%8A%AA%E5%8A%9B%E4%B8%8D%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%80%95%E4%BD%A0%E4%B8%8D%E5%A4%9F%E5%8A%AA%E5%8A%9B/",
            "title": "努力不是没有用，就是怕你不够努力",
            "date_published": "2022-09-02T01:30:30.058Z",
            "content_html": "<p>来源：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sY2h4Lm9yZy8=\">励志一生</span> 文 / 唤醒沉睡的猪</p>\n<p><img data-src=\"http://www.lchx.org/d/file/2017092717/2017092717011514.jpg\" alt=\"努力不是没有用，就怕你不够努力\"></p>\n<p>最近的某一天，我下班回到家，突然接到了一个陌生人的来电，原本我以为又是那些推销商铺的人给我打的电话，没想到打电话的人竟是一位某企业的合伙人。</p>\n<p>见到我接了电话，她快速表明来意，希望我能够抽空帮他们企业写个漂亮的简介。她说之前公司也有过一个版本的简介，但是写得太差了，现在企业不断发展壮大，企业的简介也要跟着更新换代。</p>\n<p>我问她是怎么认识我的，她说是一个朋友介绍的，说我曾经给过不少客户写材料，且一直从事与文字相关的工作，还听说我这些年一直坚持不懈的写作，所以觉得我定能够给他们量身定制一份非常完美的企业简介。</p>\n<p>她问我大概怎么收费，如果是前几年，我一定会特别不好意思的说你随便给吧，意思一下就可以了。可是，今天，我居然可以底气十足的和人家谈条件。</p>\n<p>当我把这些情况告诉给推荐我的那个朋友时，她打趣地说：“你现在居然敢和我朋友谈条件了，你太狠了。” 我告诉她，她不是也因为觉得我不错，才愿意把我介绍给人家吗，如果我的水平真差到都不需要回报，那人家找我干什么呢。朋友竖起大拇指，一个劲给我点赞，说她喜欢的就是我的这种霸气。</p>\n<p>没错，当你足够努力和足够优秀的时候，不仅认识你的愿意推荐你，甚至他们也会把认识你当作是一种荣幸。当你的能力已经在某个领域广为人知的时候，这时候就是你知识和能力变现的时候，也是你可以充满底气地和人家谈条件的时候。所以，不要总是觉得努力没有什么用，重要的是怕你不够努力。</p>\n<p>我曾经在一篇文章提到过一位知名的作家，她叫一直特立独行的猫，去年的时候，我给她写过一封邮件，请教她一些写作上的困惑。当我发出邮件的时候，是晚上的十一点多，我无比忐忑不安，因为我怕自己打扰到她休息了，让她对我心生厌恶。可是我没想到，当我一觉醒来的时候，我收到了她回复给我的邮件，那是凌晨三点多，她告诉我不用怕打扰她，她每天都会写作到深夜。</p>\n<p>她的回信对我触动很大，因为我一直觉得自己在很多的同龄人中算是能够吃苦的了，也是比较努力的了。毕竟自己出身穷苦农村，生活的艰难让我早早就学会了自力更生。读大学的时候，我已经学会四处打工赚钱养家，甚至给父母在农村起了漂亮的小楼房。这些经历让很多人都觉得我其实已经非常努力了，甚至连我自己也曾经一度错误地认为自己已经相当努力了，可是对比人家，我才发现，那只不过是冰山一角。难怪人家能够成为畅销书作家，三十岁出头就实现了财务自由，而我依然还在别人的管控下做着普普通通的工作。</p>\n<p>我很幸运我遇到了像一直特立独行的猫这样的人，她们的正向激励让我发现其实每一个普普通通的人都可以通过学习和努力去改变命运。</p>\n<p>就像我很多年前坚持写作一样，我真的也不相信有一天，我在还没大学毕业的时候就能够让多篇文章变成了铅字，还能够靠着文字谋生。而就在最近，我升职加薪了，还被放到了一个比较核心的部门，这一切，靠的不是别的，恰恰是我人无我有人有我优的职场核心竞争力，那就是扎实的写作功底。</p>\n<p>新单位头儿告诉我，之所以找到我，是多方了解得知我曾经有过多个岗位的锻炼经验，而且每到一个部门，工作都非常认真和努力，最重要的是，我有一项比较优势的技能，那就是写作，而他们想要的就是这样一位拥有较好写作功底，能够驾驭一些大型专题材料写作的人。</p>\n<p>很多人问我，是怎么来到这个单位的，我如实告诉了他们我获得这次机会的原因。当他们听到我说人家想要写作功底比较强的人的时候，他们无一例外的觉得，我就是那个最适合的人选。</p>\n<p>虽然这样的赞美我听了无数遍，已经不足为奇，但是，当听到人家说起文字功底好，第一个想到的就是我的时候，我的心中莫名的涌动着一股暖流。我突然觉得自己所有的努力都没有白费，那些曾经挑灯写作的夜晚，那些曾经不被看好的文字，终于在今天都变成了我职场竞争的有力武器。甚至，良好的写作功底，已经成为我个人的一个闪耀品牌，正在一点点改变着我的未来和命运。</p>\n<p>用自己这活生生的事例，印证了那一句话：努力不是没有用，就怕你不够努力。</p>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E6%83%85%E6%84%9F%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——情感",
            "date_published": "2022-09-02T01:30:30.058Z",
            "content_html": "<ol>\n<li>其实我也没有在等你，只是我喜欢不上别人而已。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/%E4%BC%BC%E6%B0%B4%E6%B5%81%E5%B9%B4%E5%B0%8F%E6%96%87%E6%A1%88/%E5%8A%B1%E5%BF%97%E7%B1%BB/%E6%96%87%E6%A1%88/",
            "title": "Book思议——励志",
            "date_published": "2022-09-02T01:30:30.058Z",
            "content_html": "<ol>\n<li>生活中，如果你的影子总走在你之前，那是因为你前进的路上没有光。</li>\n<li>人群拥挤？只要你有目标、有方向，全世界都会为你让路。</li>\n</ol>\n",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%85%AD%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%85%AD%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "六月的雨-充满回忆的你。",
            "date_published": "2022-09-02T01:30:30.051Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"a04ae6223cec52a01a0ec5df3d5f3589ce3b7421c1c785e143e93e1a8be112f9\">6d2697f82afba54f38f99fe41bef9541180bb59eb0c3009dcb042b44a0761a166d41ac665732856997aef18363c34c2361da1725669a370ae41e19f4d717aeb7a20f55b1f056daad7f0df74946be70346736953aa082fc807469a8b64675c060ac4cb979b20fbf50b52e44d825becd3e5335d4e68e3da44f7d4f6b52b54f82a6f6e0bdfcb7f511bc2751c4ff51c01371</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E4%B8%89%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "雨季，一人撑伞、影子陪行。",
            "date_published": "2022-09-02T01:30:30.051Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"5aec9217a5d83df60877fcb6dc4b48b6b49b0d296ef37954c57ee03db87c5ee6\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Diary/%E7%94%9F%E6%B4%BB/2021%E5%B9%B4/%E5%9B%9B%E6%9C%88/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/",
            "title": "四月的风-微甜。",
            "date_published": "2022-09-02T01:30:30.051Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d96f9e0f9e13ad0e8eb0e7402a68c87374d92c2853646af4f4ada4ff57375388\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">请输入密码查看，密码为6位数哦~。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Diary",
                "记录生活"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/MyProject/YanAn/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/MyProject/YanAn/",
            "title": "MyProject——Shallow_Project",
            "date_published": "2021-11-30T16:00:00.000Z",
            "content_html": "<h1 id=\"initial\"><a class=\"anchor\" href=\"#initial\">#</a> Initial</h1>\n<blockquote>\n<p>项目前言：</p>\n<p>​\t项目开始于 2021 年 12 月 1 日。项目名称《shallow_project》寓意浅末年华，由来，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctam4yZTIzZnd4aXQ1b21sbmVhMTI5MmJrN2FkMzl4LnhuLS14a3I1MnhoM2dycWcuY24=\">是当前项目的域名是 www. 浅末年华.cn</span>，干脆就直接随便取一个名字了。这是我自己的第一个以 vue 做框架正式搭建起来的项目，从项目的底层框架、页面、样式、效果、动效、插件、服务器、域名、都是我一个人独立完成。项目开始，之前没做过，知道会遇到各种各样的坑，但是：再小的帆，也能远航，行难事，必有所得。干就完事了！</p>\n</blockquote>\n<h1 id=\"还没开始就遇到坑\"><a class=\"anchor\" href=\"#还没开始就遇到坑\">#</a> 还没开始就遇到坑！</h1>\n<ol>\n<li>\n<p>开始的时候用什么 css 预处理器，在网上找了半天，我后面决定用 sass，原因很简单，它牛 *！</p>\n<p>直接去他的官网 (Sass)[<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Fzcy5oay9pbnN0YWxsLw==\">https://www.sass.hk/install/</span>] 下载！下载了以后认真看安装步骤，一步一步走就完事了。</p>\n</li>\n<li>\n<p>在项目中安装 sass</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev sass-loader</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//sass-loader依赖于node-sass</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev node-sass</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "历练ing",
                "项目总结",
                "MyProject",
                "MyProject",
                "项目"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95/",
            "title": "自己封装的一些公用方法",
            "date_published": "2021-10-27T16:00:00.000Z",
            "content_html": "<h1 id=\"日期格式的封装\"><a class=\"anchor\" href=\"#日期格式的封装\">#</a> 日期格式的封装</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//format=> 日期格式 date=> 要格式化的时间 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dateFormat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">format<span class=\"token punctuation\">,</span> date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">const</span> dateTemp <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateTemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            time <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> year <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> month <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> day <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// if (month &lt; 10) &#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//     month = '0' + month;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// if (day &lt; 10) &#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//     day = '0' + day;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 这里如果需要在没有满 10 之前加一个 0，则打开这个注释。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> year <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'YYYY/MM/DD'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> year <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'MM-DD-YYYY'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> month <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'MM/DD/YYYY'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> month <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> year<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'YYYY年MM月DD日'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> year <span class=\"token operator\">+</span> <span class=\"token string\">'年'</span> <span class=\"token operator\">+</span> month <span class=\"token operator\">+</span> <span class=\"token string\">'月'</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">'日'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"去除日期月份-天前面的0\"><a class=\"anchor\" href=\"#去除日期月份-天前面的0\">#</a> 去除日期月份、天前面的 0</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 去除 0 参数 日期 如 2020-07-08 返回为 2020-7-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token function\">dislodgeZero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> strArray <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      strArray <span class=\"token operator\">=</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> strArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure>",
            "tags": [
                "历练ing",
                "项目总结",
                "自己封装的一些公用方法",
                "知识点记录",
                "成长"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E8%AF%BA%E5%8D%8E%E9%A1%B9%E7%9B%AE/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E8%AF%BA%E5%8D%8E%E9%A1%B9%E7%9B%AE/",
            "title": "在诺华参与的项目。",
            "date_published": "2021-10-27T16:00:00.000Z",
            "content_html": "<h1 id=\"项目介绍\"><a class=\"anchor\" href=\"#项目介绍\">#</a> 项目介绍</h1>\n<p><code>本次项目总共三个portal</code></p>\n<h2 id=\"main-portal\"><a class=\"anchor\" href=\"#main-portal\">#</a> Main Portal</h2>\n<blockquote>\n<p>因为是中途加入，所以并没有参与 Main Portal 开发。</p>\n</blockquote>\n<h2 id=\"employee-portal-mr\"><a class=\"anchor\" href=\"#employee-portal-mr\">#</a> <strong>Employee Portal</strong> （Mr）</h2>\n<blockquote>\n<p>Employee Portal 是我主要负责的部分。</p>\n<p><img data-src=\"https://s.pc.qq.com/tousu/img/20211028/5928497_1635411119.jpg\" alt=\"项目截图\"></p>\n<p><strong>功能介绍：</strong></p>\n<p>通过企业微信进入。展示 mr 的个人信息。信息中包含姓名，mr 职位，以及个人 mrid。可以查看到当前 mr 之下的公众号有那些，并展示当前公众号之中的的所有医生列表。医生列表中可以查看到：医生的名字，医生的各种状态，如：关注公众号状态、注册状态、dcr 通过状态、黑名单管理状态、隐私协议的签署状态。医生所在的医院，所在的科室，以及服务权限，和展示医生的邀请二维码。</p>\n<p><strong>实现思路：</strong></p>\n<p>把需要调用的接口写好。一次性引用过来。一共五个接口。分别是用户信息、公众号名字、医生列表、二维码接口、状态筛选接口。</p>\n<ol>\n<li>\n<p>在登录进来的 index 页面获取登录进来的 token。这时候做一个判断，判断登录时接口返回的数据中 res.success === false，如果等于 false，证明没有登录权限，这时候调用一个 vant 框架的弹窗组件 (Dialog.alert)，将后台返回的登录失败的信息展示出来。在点击了确定之后返回到点击进入 Employee 的地方，<ins class=\"wavy success\">一个关闭当前微信网页的方法。</ins></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"WeixinJSBridgeReady\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">WeixinJSBridge</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"closeWindow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">WeixinJSBridge</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"closeWindow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>把这个写在 vant 框架的 Dialog.alert 的 <code>.then</code>  中。否则就正常进入 MR 中。将从这个接口中获取的 token、userInfo、staffcode。保存起来。后面需要用到 staffcode 去拿到里面的 mrid。当前的页面重定向到医生列表信息也。<span class=\"bule\">this.$router.push(&quot;/doctorList&quot;)</span>。</p>\n</li>\n<li>\n<p>进入 doctorList 医生列表页面。一进页面就在 vue 生命周期钩子函数 <code>mounted</code>  里面调用 staffCode 方法，这个方法是调用用户信息接口的，所以在一进来就需要渲染出来，入参是登录时候获取的 staffcode。接口返回用户的姓名、用户的职位、用户的员工号（mrid）。在这个方法里面调用获取所有公众号名字接口，这时候传递一个 mrid 过去。所有公众号接口不需要入参，直接可以从中获取当前公众号的名字、ccAppId（公众的唯一 ID 标识）、当前公众号之下的所有人的唯一标识 buType。</p>\n<p><span class=\"blue\"><strong>知识点：</strong></span></p>\n<ul>\n<li>默认进来的 tab 默然选中第一个。所以取下标为 0 的属性值赋值给当前 data 定义的对应值。</li>\n</ul>\n<p>给 data 赋值当前的 ccappid、mrid。这时候默认都是 tab 中第一个的值。在所有公众号接口方法里面调用医生列表方法以进行第一次页面进来的默认渲染，（这次调用医生列表方法是第一次调用，里面不给当前 List 做渲染，而是在里面再调用一次真正式的医生列表方法才给 List 做赋值）入参是目标医生的 ccappid 和 mrid。一进来的时候进入医生列表方法，判断当前的 mr 之下是否有医生。利用接口返回的总量字段<strong> total</strong> 作为判断。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">doctorList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function\">hcpList</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>total <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>istotal <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 目标 mr 为空。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            pageNum<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doctorListFormal</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            ccAppId<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ccAppId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            mrId<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mrId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doctorListFormal</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p><code>功能：</code> <ins>如果当前目标 mr 之下没有医生，则默认渲染全量的医生的前十条数据，不能什么也不暂时给他用户看</ins>。如果 total 等于 0. 则当前目标 mr 之下没有医生。默认渲染全量的前十条数据，这时候调用医生列表的入参就变为只传一个 pageNum，页数等于 1。否则就正常入参，把当前公众号的 ccAppId 和 mrid 传过去，展示当前 mr 之下的工作号的所有医生。** 细节：** 这次调用医生列表方法不进行给当前的 hcpList 赋值，而是只做一个判断，在判断里面再调用一次医生列表接口方法进行赋值。</p>\n</li>\n<li>\n<p>在进入页面时、在 vue 生命周期函数 <code>mounted</code>  调用状态筛选列表接口。入参是一个数组类型。需要接口给我们返回当前状态的值，和状态的值的唯一 id（code）。例子：状态值为：未关注。状态值的 id（code）为 0。这时候在页面就可以做双向绑定作为判断，如果等于 1，就是已关注，如果等于 0。就是未关注，当用户勾选单选框的时候，将双向绑定的 id（code）传给后端已做模糊搜索。</p>\n<p><span class=\"blue\"><strong>知识点：</strong></span></p>\n<ul>\n<li>数组的 <code>concat()</code>  方法。方法用于连接两个或多个数组。方法不会更改现有数组，而是返回一个新数组，其中包含已连接数组的值。</li>\n<li>vant 框架里面的<strong> van-radio</strong> 组件，前端展示一个单选按钮组，默认需要有一个全部的选项，接口中没有返回，所以需要用到 <code>Arr.concat()</code>  方法。将后端返回的和前端自己定义的结合在一起。</li>\n<li>vant 中单选组件的双向绑定值、默认选中的话，默认定义的值要等于双向绑定的值。</li>\n</ul>\n</li>\n<li>\n<p>点击 Tab 事件：切换不同的公众号。使用 vant 框架中的<strong> van-tabs</strong> 组件，点击的时候需要传不同的 ccappid 作为入参。利用 vant 的属性，可以将 <code>:title</code>  和 <code>:name</code>  绑定需要的公众号名字和需要传递过去的<strong> item.ccippid</strong>。点击的时候，将当前（this）的<strong> ccAppId</strong> 和<strong> title</strong> 赋值给当前 data 中定义的<strong> ccAppId</strong> 和<strong> title</strong>。this.butype 等于公众号数组中的 butype。并且，在点击的时候调用一次下拉刷新的方法。使下面的医生列表进行刷新渲染。<strong>功能：</strong><ins>点击 Tab 以后将状态筛选的值都清空。调用清空状态筛选方法</ins>。</p>\n<p><span class=\"blue\"><strong>知识点：</strong></span></p>\n<ul>\n<li>\n<p>数组的 <code>find</code>  方法，方法为数组中的每个元素都调用一次函数执行：方法返回通过测试（函数内判断）的数组的第一个元素的值。当数组中的元素在测试条件时返回 <em>true</em> 时，find () 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined。</p>\n</li>\n<li>\n<p>vant 的 tab 中，需要获取数组中的某一项的时候，可以直接使用它绑定的属性值。tab 中。可以使用他的 <code>:title</code>  和 <code>:name</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 点击 tab 切换 时调用的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">invitationCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ccAppId<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicName <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 点击 tab 时候，切换把当前的公众号名字传给二维码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ccAppId <span class=\"token operator\">=</span> ccAppId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 点击 tab 的时候，把当前的公众号的 ccAppId 传给当前。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicTags<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>butype <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>butype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 点击 tab 的时候，把当前的公众号的 ccAppId 传给当前。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 点击切换公众号，把当前所有选中的状态恢复默认。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用下拉刷新方法。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>搜索功能：在输入框输入医生的名字、医院、科室，点击搜索按钮后。根据输入的类容去搜索数据。调用后台接口，入参就是用户输入的数据。<strong>功能：</strong><ins>只要用户点击搜索以后，将右边的状态筛选的值清空。调用清空状态筛选方法</ins>。这里需要注意的是。三个搜索框，可以绑定同一个事件。并且输入的时候判断，如果输入的值为空，返回。不调用 hcpList 接口方法。</p>\n<p><span class=\"blue\"><strong>知识点：</strong></span></p>\n<ul>\n<li>\n<p>调用一个清除入参是空值的方法</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断入参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">removePropertyOfNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//params [item][0] 状态的数组，第一项为空的话，就删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> params<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> params<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">delete</span> params<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> params<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>这个方法会去遍历 params 这个对象。并且把这个对象里面值为空的对象都删掉，再返回一个新对象。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>状态筛选点击事件：一个是点击状态筛选，打开 vant 的 Popup 弹出层。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"admin-portal\"><a class=\"anchor\" href=\"#admin-portal\">#</a> Admin Portal</h2>\n<blockquote>\n<p><img data-src=\"%E8%AF%BA%E5%8D%8E%E9%A1%B9%E7%9B%AE.assets/image-20220118165415945-16424960614763.png\" alt=\"image-20220118165415945\"></p>\n<p>项目测试 qa 地址：[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9xYS5jb25uZWN0Lm5vdmFydGlzLmNvbS5jbi9hZG1pbi9ob21l\">https://qa.connect.novartis.com.cn/admin/home</span>](Novartis Admin Portal)</p>\n<p>这是一个展示数据的 dashboards 页面，主要是功能就是使用 Echarts 组件实现各种饼状图、圆圈图的展示。其中的难点就是调改 Echarts 配置文件。修改自己想要的颜色，大小，位置。需要花点时间了解图形的配置。组件官网链接<a href=\"ECharts\"> https://echarts.apache.org/handbook/zh/get-started/</a></p>\n<p>这个页面总共就两个接口都是 get 请求，不需要入参。都只是展示，从后台拿到什么，就展示出来就可以了。一个是最后更新时间，一个是图中的所有数据，包括关注总人数、每日增加人数、以及每个图标中的数据。都是从后台拿到的。我只需要把字段渲染在需要的位置即可。</p>\n</blockquote>\n<h2 id=\"rtw_wecom\"><a class=\"anchor\" href=\"#rtw_wecom\">#</a> RTW_Wecom</h2>\n<blockquote>\n<p>这是一个企业微信小程序，有</p>\n</blockquote>\n",
            "tags": [
                "历练ing",
                "项目总结",
                "诺华项目",
                "成长",
                "项目经历"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/",
            "title": "Nginx踩坑篇",
            "date_published": "2021-05-30T16:00:00.000Z",
            "content_html": "<h1 id=\"xshell\"><a class=\"anchor\" href=\"#xshell\">#</a> Xshell</h1>\n<p>学习 Nginx 需要装 <code>Xshell</code>  这个工具。装这个连接远程，方便操作。</p>\n<p>安装地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5HVEQ0Vk5TYmwwYldDVDd6SjBrbEE=\">https://pan.baidu.com/s/1NGTD4VNSbl0bWCT7zJ0klA</span></p>\n<p>提取码：7b8j</p>\n<p>下载这个软件压缩包，里面有文档指导安装破解版的。</p>\n<h1 id=\"实现拖拽上传下载文件的解决方法\"><a class=\"anchor\" href=\"#实现拖拽上传下载文件的解决方法\">#</a> 实现拖拽上传下载文件的解决方法</h1>\n<p>安装<strong> lrzsz</strong>，</p>\n<pre><code class=\"language-cmd\">yum -y install lrzsz\n</code></pre>\n<p>使用方法：这时候可以直接敲命令 rz、sz、下载和上传数据了。</p>\n<p>上传文件：rz + 文件名</p>\n<p>下载文件：sz + 文件名</p>\n<p>如果报错，显示传输失败，有可能是名字相同了。或者改文件夹下这个名字已经存在该文件了。这时，我们只需要修改一下文件的名字即可。</p>\n<h1 id=\"配置好防火墙了端口也设置了80就是进不去nginx\"><a class=\"anchor\" href=\"#配置好防火墙了端口也设置了80就是进不去nginx\">#</a> 配置好防火墙了，端口也设置了 80. 就是进不去 nginx。</h1>\n<p>我靠。这个问题我搞了一天。原来是因为服务器没有配置安全组。我的是阿里云服务器，需要配置安全组。<img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210603154118108.png\" alt=\"image-20210603154118108\"></p>\n<p>感觉这个巨坑了。有的服务器不需要手动配置安全组。</p>\n<h1 id=\"阿里服务器需要配置安全组\"><a class=\"anchor\" href=\"#阿里服务器需要配置安全组\">#</a> 阿里服务器需要配置安全组</h1>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210607115621226.png\" alt=\"image-20210607115621226\"></p>\n<h1 id=\"make-no-targets-specified-and-no-makefile-found-stop\"><a class=\"anchor\" href=\"#make-no-targets-specified-and-no-makefile-found-stop\">#</a> make: *** No targets specified and no makefile found. Stop.</h1>\n<p>第一种：</p>\n<p>第一、update 最新版本系统软件</p>\n<p>yum update</p>\n<p>这个必须要执行后才可以安装我们的系统软件或者一键包。</p>\n<p>第二、编译缺失关联软件</p>\n<p>yum install gcc build-essential</p>\n<p>编译执行完毕之后，我们在执行./configure &amp;&amp; make 这类的执行命令就可以解决问题。</p>\n<p>第二种：</p>\n<p>一、Linux 下各种依赖都已经安装，是因为没有找到 makefile。</p>\n<p>如果是自己写的，确定在当前目录下；如果是源码安装，先运行./configure，生成 makefile，再执行 make，即可正常运行。</p>\n<p>二、如果没有安装其他依赖先安装依赖</p>\n<p>yum install gcc gcc-c++ autoconf automake</p>\n<p>yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel （安装依赖 zlib、openssl 和 pcre</p>\n<h1 id=\"在centos虚拟机中无法使用yum命令\"><a class=\"anchor\" href=\"#在centos虚拟机中无法使用yum命令\">#</a> 在 centOs 虚拟机中无法使用 yum 命令</h1>\n<p>敲 yum 命令时，出现以下错误：</p>\n<pre><code class=\"language-cmd\">[root@Linux1 home]# yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel\nLoaded plugins: fastestmirror, refresh-packagekit, security\nLoading mirror speeds from cached hostfile\nYumRepo Error: All mirror URLs are not using ftp, http[s] or file.\n Eg. Invalid release/repo/arch combination/\nremoving mirrorlist with no valid mirrors: /var/cache/yum/x86_64/6/base/mirrorlist.txt\nError: Cannot find a valid baseurl for repo: base\n</code></pre>\n<p>首先，这里说一下具体的原因：</p>\n<blockquote>\n<ol>\n<li>CentOS 6 已经随着 2020 年 11 月的结束进入了 EOL（Reaches End of Life），不过有一些老设备依然需要支持，CentOS 官方也给这些还不想把 CentOS6 扔进垃圾堆的用户保留了最后一个版本的镜像，只是这个镜像不会再有更新了</li>\n<li>官方便在 12 月 2 日正式将 CentOS 6 相关的软件源移出了官方源，随之而来逐级镜像也会陆续将其删除。</li>\n<li>不过有一些老设备依然需要维持在当前系统，CentOS 官方也给这些还不想把 CentOS6 扔进垃圾堆的用户保留了各个版本软件源的镜像，只是这个软件源不会再有更新了。</li>\n</ol>\n</blockquote>\n<p><code>简单的说就是</code> ：Centos 6 已经不被官方支持，所以想要使用就要用其他代理比如阿里云 Vault 镜像。我下面使用的是阿里云的镜像。第三条命令可以看出来。</p>\n<p>解决方案：</p>\n<blockquote>\n<pre><code class=\"language-cmd\">sed -i &quot;s|enabled=1|enabled=0|g&quot; /etc/yum/pluginconf.d/fastestmirror.conf\n</code></pre>\n<pre><code class=\"language-cmd\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n</code></pre>\n<pre><code class=\"language-cmd\">curl -o /etc/yum.repos.d/CentOS-Base.repo https://www.xmpan.com/Centos-6-Vault-Aliyun.repo\n</code></pre>\n<pre><code class=\"language-cmd\">yum clean all\n</code></pre>\n<pre><code class=\"language-cmd\">yum makecache\n</code></pre>\n<p>以上五条命令，按照顺序依次敲进去就可以了 。</p>\n</blockquote>\n<h1 id=\"another-app-is-currently-holding-the-yum-lock-waiting-for-it-to-exit\"><a class=\"anchor\" href=\"#another-app-is-currently-holding-the-yum-lock-waiting-for-it-to-exit\">#</a> Another app is currently holding the yum lock; waiting for it to exit...</h1>\n<p>使用 yum 时出现这样的错误、且一直循环报错。</p>\n<pre><code class=\"language-cmd\">vim /etc/yum.repos.d/CentOS-Base.repo # 进去修改enabled = 1\n</code></pre>\n<pre><code class=\"language-cmd\">rm -f /var/run/yum.pid #永久禁止该错误\n</code></pre>\n<p>然后就可以重新执行 yum 了。</p>\n<h1 id=\"-bash-systemctl-command-not-found\"><a class=\"anchor\" href=\"#-bash-systemctl-command-not-found\">#</a> -bash: systemctl: command not found</h1>\n<p>开启防火墙，关闭防火墙。在虚拟机中打开防火墙。如果是服务器，记得在安全组中配置需要访问的端口。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Nginx",
                "Nginx"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Nginx/Nginx/",
            "title": "Nginx学习",
            "date_published": "2021-05-30T16:00:00.000Z",
            "content_html": "<h1 id=\"学习地址\"><a class=\"anchor\" href=\"#学习地址\">#</a> 学习地址</h1>\n<p>Nginx 官网<span class=\"exturl\" data-url=\"aHR0cDovL25naW54Lm9yZy9lbi9kb3dubG9hZC5odG1s\"> nginx</span></p>\n<p>学习视屏地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTImYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXI=\"> Nginx</span></p>\n<p>学习视屏地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo0NDExSzdnMj9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xMTI0MjUzOTM5MDQzMjczMzYxMg==\"> Nginx</span></p>\n<p>虚拟机安装视频<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTV6NHkxOTdzaz90PTExOTE=\"> centOs</span></p>\n<h1 id=\"nginx概述\"><a class=\"anchor\" href=\"#nginx概述\">#</a> Nginx 概述</h1>\n<p>Nginx（engine x）是一个高性能的 HTTP 和反向代理服务器，特点是占用内存少，并发能力强，事实上，Nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 的网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<blockquote>\n<ol>\n<li>\n<p>安装依赖项，使用以下命令安装 Nginx 需要的依赖项。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc zlib zlib-devel pcre-devel openssl openssl-devel</pre></td></tr></table></figure><p>安装好依赖项以后，使用以下命令查看版本号：</p>\n<pre><code class=\"language-sh\">pcre-config --version\n</code></pre>\n</li>\n<li>\n<p>解压拖进去的 nginx 安装包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -xvf + apache-tomcat-9.0.46-fulldocs.tar.gz <span class=\"token comment\"># + 后面这个是安装包名字。</span></pre></td></tr></table></figure></li>\n<li>\n<p>解压好以后进入解压的文件夹执行：<strong>./configure</strong>，编译文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure</pre></td></tr></table></figure></li>\n<li>\n<p>使用<strong> make &amp;&amp; make install</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<p>安装成功之后，在 usr 中会多出来一个文件夹 **/usr/nginx**, 在 nginx 中，有 sbin 的启动脚本。</p>\n<h1 id=\"防火墙\"><a class=\"anchor\" href=\"#防火墙\">#</a> 防火墙</h1>\n<ol>\n<li>\n<p>开启防火墙</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start firewalld</pre></td></tr></table></figure></li>\n<li>\n<p>关闭防火墙</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop firewalld</pre></td></tr></table></figure></li>\n<li>\n<p>查看防火墙中开放的端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --list-all</pre></td></tr></table></figure><p>后期需要在防火墙中添加端口号，使用以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">8080</span>/tcp --permanent  <span class=\"token comment\"># 添加一个 81 端口</span></pre></td></tr></table></figure><p>添加成功以后，需要重启以下防火墙：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --reload <span class=\"token comment\"># 重启防火墙</span></pre></td></tr></table></figure><p>这时候再去 2、查看防火墙的端口，就会多了一个 81 端口。</p>\n</li>\n</ol>\n<h1 id=\"实现上传压缩包rz\"><a class=\"anchor\" href=\"#实现上传压缩包rz\">#</a> 实现上传压缩包 rz</h1>\n<p>安装<strong> lrzsz</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> lrzsz</pre></td></tr></table></figure><h1 id=\"解压压缩包命令\"><a class=\"anchor\" href=\"#解压压缩包命令\">#</a> 解压压缩包命令</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -xvf + apache-tomcat-9.0.46-fulldocs.tar.gz // + 后面这个是安装包名字。</pre></td></tr></table></figure><h1 id=\"linux中配置安装jdk及环境配置\"><a class=\"anchor\" href=\"#linux中配置安装jdk及环境配置\">#</a> Linux 中配置安装 jdk 及环境配置。</h1>\n<h2 id=\"我们直接可以使用yum一键安装\"><a class=\"anchor\" href=\"#我们直接可以使用yum一键安装\">#</a> 我们直接可以使用 yum 一键安装</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y java-1.8.0-openjdk-devel // 这里装完以后记得去配置jdk环境变量</pre></td></tr></table></figure><p>查看 java 版本，</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java -version</pre></td></tr></table></figure><h2 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h2>\n<ol>\n<li>\n<p>找到 java 安装的路径</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">whereis</span> java // 查看路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">ls</span> -lrt /usr/bin/java // 查看java的bin之下路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// /usr/bin/java -<span class=\"token operator\">></span> /etc/alternatives/java</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">ls</span> -lrt /etc/alternatives/java // 查看需要配置环境的路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> // /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64/jre/bin/java</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</pre></td></tr></table></figure></li>\n<li>\n<p>进入文件夹配置环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/profile // 进入java环境变量配置单的文件</pre></td></tr></table></figure><p>在文件的末尾处添加以下代码：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el8_4.x86_64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$JAVA_HOME</span>/jre/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar</pre></td></tr></table></figure><p><code>注意：</code> 上面代码的第一行，**export JAVA_HOME=** 之后，改为你自己的路径，切注意，路径不包含版本号、系统号之后的 <code>/jre/bin/java</code>  这个路径。</p>\n</li>\n<li>\n<p>使配置生效</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>查看 JAVA_HOME 环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$JAVA_HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"nginx常用命令\"><a class=\"anchor\" href=\"#nginx常用命令\">#</a> Nginx 常用命令</h1>\n<p><code>使用Nginx操作命令前提条件：</code> 必须进入 nginx 目录中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/nginx/sbin</pre></td></tr></table></figure><ol>\n<li>\n<p><strong>nginx 的版本号</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx -v</pre></td></tr></table></figure></li>\n<li>\n<p><strong>启动 nginx</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx</pre></td></tr></table></figure></li>\n<li>\n<p><strong>关闭 nginx</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx -s stop</pre></td></tr></table></figure></li>\n<li>\n<p><strong>重新加载 nginx</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx -s reload</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"nginx配置文件\"><a class=\"anchor\" href=\"#nginx配置文件\">#</a> nginx 配置文件</h1>\n<ol>\n<li>\n<p>配置文件的位置：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./usr/local/nginx/conf/nginx.conf</pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210602171842698.png\" alt=\"配置文件的位置\"></p>\n</li>\n<li>\n<p>nginx 配置文件的组成</p>\n<ul>\n<li>\n<p>nginx 配置文件有三部分组成</p>\n<p><strong>第一部分</strong> 全局块</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210602173316902.png\" alt=\"image-20210602173316902\"></p>\n<p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令。</p>\n<p>比如：worker_processes ,worker_processes 值越大，可以支持的并发处理量也越多。</p>\n<p><strong>第二部分</strong> events 块</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5Cimage-20210602173637443.png\" alt=\"image-20210602173637443\"></p>\n<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。</p>\n<p>比如：worker_connections 1024;</p>\n<p><strong>第三部分</strong> http 块</p>\n<p>Nginx 服务器中，配置最频繁的部分，http 块也可以包括 http 全局块、server 块</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"nginx配置实例反向代理\"><a class=\"anchor\" href=\"#nginx配置实例反向代理\">#</a> Nginx 配置实例 —— 反向代理</h1>\n<ol>\n<li>\n<p>在 dindows 系统的 host 文件中进行域名和 ip 对应关系的配置</p>\n<p>一般的目录地址是：<strong>c:Windows/System32/drivers/etc</strong>，在里面加上一段 ip。比如：106.15.176.231 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMjMuY29t\">www.123.com</span>。前面是 ip 地址，后面是你的域名。</p>\n</li>\n<li>\n<p>在 nginx 进行请求转发的配置（反向代理配置）</p>\n<p>找到 nginx 的配置文件。一般在：<strong>/usr/local/nginx/conf</strong> 这个路径之下。打开配置以下项；</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C8.png\" alt=\"image-20210607134411528\"></p>\n<p>将 server 中的<strong> server_name localhost</strong> 改为 server_name + 自己的 ip。</p>\n<p>在 location 中添加一个转发路径：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>proxy_pass http:127.0.0.1:8080</pre></td></tr></table></figure><p>这样做，如果我们访问的是自己的 ip：<strong>106.15.176.231</strong>，如果他是 80 端口，他就会给我们转发到<strong> 127.0.0.1:8080</strong> 端口去。</p>\n</li>\n</ol>\n<h2 id=\"根据不同的路径跳转到不同的tomcat中\"><a class=\"anchor\" href=\"#根据不同的路径跳转到不同的tomcat中\">#</a> 根据不同的路径，跳转到不同的 tomcat 中</h2>\n<p>实现效果：</p>\n<ul>\n<li>访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MDAxL2VkdS8=\">http://127.0.0.1:9001/edu/</span> 直接跳到 127.0.0.1:8080 端口去。</li>\n<li>访问：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MDAxL3ZvZC8=\">http://127.0.0.1:9001/vod/</span> 直接跳到 127.0.0.1:8081 端口去。</li>\n</ul>\n<p>准备工作：</p>\n<ol>\n<li>\n<p>准备两个 tomcat 服务器。</p>\n<p>在目录：<strong>usr/src</strong> 下创建两个文件夹，分别为 tomcat8080、tomcat8081。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> tomcat8080</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> tomcat8081</pre></td></tr></table></figure><p>这是可以把之前的 tomcat 进程关闭。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看当前的 tomcat 进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> tomcat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 关闭进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sill -9 + <span class=\"token function\">id</span> <span class=\"token comment\"># 这里是数字 9，而不是字母 G,ID. 查看进程时前面的就是</span></pre></td></tr></table></figure><p>在两个文件里面分别放入 tomcat 的安装包、并解压、启动（<strong>/usr/src/tomcat8081/apache-tomcat-7.0.70/bin</strong>）之下，执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./startup.sh</pre></td></tr></table></figure><p>8080 和 8081 文件夹中的 tomcat 都启动以后，8080 默认的端口号就是 8080，所以不用我们修改。我们需要进入 8081 文件夹中，修改它的配置文件。路径为：<strong>/usr/src/tomcat8081/apache-tomcat-7.0.70/conf</strong> 之中的 <code>server.xml</code>  文件。</p>\n<pre><code class=\"language-cmd\">vi server.xml\n</code></pre>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C9.png\" alt=\"image-20210607172045416\"></p>\n<p>Server port 改为 8015，</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C10.png\" alt=\"image-20210607172207668\"></p>\n<p>主要的 connector port 改为 8081。</p>\n<p>改成功以后分别启动 8080 和 8081。这时，我们启动了两个 tomcat。可以直接去地址栏输入地址。</p>\n</li>\n<li>\n<p>创建文件夹和测试页面。</p>\n<p>因为我们创建的页面是在 <code>webapps</code>  中，所以我们进到这个目录中去，给他分别建立两个文件夹。<strong>edu、ovd。<strong>在这两个文件夹中，分别放入不同的</strong> html</strong> 文件就可以了。这时，我们可以在浏览器输入 ip 地址，试试不同的端口看效果。</p>\n</li>\n</ol>\n<p>具体配置：</p>\n<ol>\n<li>\n<p>找到 nginx 配置文件，进行反向代理配置。</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C11.png\" alt=\"image-20210607175034486\"></p>\n</li>\n<li>\n<p>开放对外访问的端口号：9001、8080、8081、</p>\n</li>\n</ol>\n<h1 id=\"nginx配置实例负载均衡\"><a class=\"anchor\" href=\"#nginx配置实例负载均衡\">#</a> Nginx 配置实例 —— 负载均衡。</h1>\n<p>实现效果：</p>\n<p>在浏览器地址栏输入地址：<span class=\"exturl\" data-url=\"aHR0cDovLzEwNi4xNS4xNzYuMjMx\">http://106.15.176.231</span>，负载均衡效果，平均分配到 8080 和 8081 端口中。</p>\n<p>准备工作</p>\n<ul>\n<li>准备两台 tomact 服务器，一台 8080，一台 8081.</li>\n<li>在两台 tomcat 里面 webapps 目录中。创建名称是 edu 的文件夹，在文件夹中创建页面<strong> a.html</strong>，用于测试</li>\n</ul>\n<p>在 nginx 的配置文件中进行负载均衡的配置</p>\n<ul>\n<li>进入 nginx 的配置中去，在 http 中配置</li>\n<li><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C12.png\" alt=\"image-20210608114542443\"></li>\n</ul>\n<p>在<strong> http</strong> 块中，加一个<mark> upstreat myserver</mark> 后面的<strong> myserver</strong> 是名字，可以自定义。在新加块中加上我们的服务器列表。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstreat myserver<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8080</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8081</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在<strong> http==&gt;server</strong> 之中，修改 <code>server_name</code>  的值为自己的 ip 地址。然后在之下的 <code>location</code>  中，使用 proxy_pass  http:// + 上面自定义的名字。实现效果。</p>\n<pre><code class=\"language-cmd\">location / &#123;\n\tproxy_pass  http://myserver  #这里的myserver是自定义名字。\n&#125;\n</code></pre>\n<h2 id=\"nginx负载均衡的策略\"><a class=\"anchor\" href=\"#nginx负载均衡的策略\">#</a> nginx 负载均衡的策略</h2>\n<ol>\n<li>\n<p><strong>轮询</strong>（默认）</p>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果某后端服务器停止了。能自动剔除。</p>\n</li>\n<li>\n<p><strong>weight 权重</strong></p>\n<p>weight 代表权重，默认为 1. 权重越高被分配的客户端越多。指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。例：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstreat myserver<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8080  <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8081  <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码的 8080 端口的权重低于 8081，这时 8081 端口的客户端量就会比 8080 多一倍。</p>\n</li>\n<li>\n<p><strong>ip_hash</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstreat myserver<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ip_hash<span class=\"token punctuation\">;</span>  <span class=\"token comment\">#加上这句话就是 ip_hash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8080<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8081<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>意思是。当你第一次访问的是 8080，他就默认记住你的这个 ip 访问的就是 8080，以后你的每次访问都会是 8080。这种方法可以解决 session 的问题。</p>\n</li>\n<li>\n<p><strong>fair</strong></p>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstreat myserver<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8080<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tserver <span class=\"token number\">106.15</span>.176.231:8081<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfair<span class=\"token punctuation\">;</span>  <span class=\"token comment\">#加上这句话就是 fair 策略</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解：同时发起访问请求。这是会默认有 8080、8081 接到请求。但是，谁先接受到。就是谁访问。就是看当前的服务器那个端口响应的时间短了。</p>\n</li>\n</ol>\n<h1 id=\"nginx配置实例动静分离-测试失败\"><a class=\"anchor\" href=\"#nginx配置实例动静分离-测试失败\">#</a> Nginx 配置实例 —— 动静分离。（测试失败！）</h1>\n<ol>\n<li>\n<p>什么是动静分离；</p>\n<p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Neinx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，<br>\n一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>\n</li>\n<li>\n<p>准备工作；</p>\n<p>在 linux 系统中准备静态资源，用于进行访问，在跟目录下创建一个名为<strong> data</strong> 的文件夹，并在 data 中创建两个子文件夹。www 和 image、分别存放动态资源和静态资源。</p>\n</li>\n<li>\n<p>具体配置；</p>\n<ul>\n<li>\n<p>在 nginx 配置文件中进行配置</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CNginx%5CNginx%5C13.png\" alt=\"image-20210610133516870\"></p>\n<p>配置中：autoindex on 是为了把文件以列表的形势排列出来。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"nginx配置高可用集群\"><a class=\"anchor\" href=\"#nginx配置高可用集群\">#</a> Nginx 配置高可用集群</h1>\n<p>学习视频<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTE0JmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVy\">高可用集群</span></p>\n<ol>\n<li>\n<p>高可用集群</p>\n<ul>\n<li>\n<p>什么是高可用？</p>\n<p>高可用 HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。如果一个系统能够一直提供服务，那么这个可用性则是百分之百，但是天有不测风云。所以我们只能尽可能的去减少服务的故障。</p>\n</li>\n<li>\n<p>解决的问题？</p>\n<p>在生产环境上很多时候是以 <code>Nginx</code>  做反向代理对外提供服务，但是一天 Nginx 难免遇见故障，如：服务器宕机。当 <code>Nginx</code>  宕机那么所有对外提供的接口都将导致无法访问。</p>\n</li>\n<li>\n<p>双机热备份？</p>\n<p>这种方案是国内企业中最为普遍的一种高可用方案，双机热备其实就是指一台服务器在提供服务，另一台为某服务的备用状态，当一台服务器不可用另外一台就会顶替上去。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>配置高可用的准备工作</p>\n<ul>\n<li>需要两台服务器</li>\n<li>在两台服务器上都安装 nginx</li>\n<li>在两台服务器上都安装 keepalived</li>\n</ul>\n</li>\n<li>\n<p>在两台服务器上安装 keepalived</p>\n<p>使用 yum 命令安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> keepalived -y</pre></td></tr></table></figure><p>安装好以后，使用：rpm -q -a keepalived 这个命令查看安装的版本号。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> -q -a keepalived</pre></td></tr></table></figure><p>keepalived 的安装位置在：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /etc // 安装位置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> keepalievd/  // 进入目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vi</span> keepalievd.conf // 进入配置文件</pre></td></tr></table></figure></li>\n<li>\n<p>完成高可用配置（主从配置）</p>\n<ol>\n<li>\n<p><strong>修改主机（192.168.16.128）keepalived 配置文件</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#检测脚本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vrrp_script chk_http_port <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    script <span class=\"token string\">\"/usr/local/src/nginx_check.sh\"</span> <span class=\"token comment\">#心跳执行的脚本，检测 nginx 是否启动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    interval <span class=\"token number\">2</span>                          <span class=\"token comment\">#（检测脚本执行的间隔，单位是秒）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    weight <span class=\"token number\">2</span>                            <span class=\"token comment\">#权重</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#vrrp 实例定义部分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vrrp_instance VI_1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    state MASTER            <span class=\"token comment\"># 指定 keepalived 的角色，MASTER 为主，BACKUP 为备</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    interface ens33         <span class=\"token comment\"># 当前进行 vrrp 通讯的网络接口卡 (当前 centos 的网卡) 用 ifconfig 查看你具体的网卡</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    virtual_router_id <span class=\"token number\">66</span>    <span class=\"token comment\"># 虚拟路由编号，主从要一直</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    priority <span class=\"token number\">100</span>            <span class=\"token comment\"># 优先级，数值越大，获取处理请求的优先级越高</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    advert_int <span class=\"token number\">1</span>            <span class=\"token comment\"># 检查间隔，默认为 1s (vrrp 组播周期秒数)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">#授权访问</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    authentication <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        auth_type PASS <span class=\"token comment\">#设置验证类型和密码，MASTER 和 BACKUP 必须使用相同的密码才能正常通信</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        auth_pass <span class=\"token number\">1111</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    track_script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        chk_http_port            <span class=\"token comment\">#（调用检测脚本）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    virtual_ipaddress <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token number\">192.168</span>.16.130            <span class=\"token comment\"># 定义虚拟 ip (VIP)，可多设，每行一个</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>virtual_ipaddress</code>  里面可以配置 vip, 在线上通过 vip 来访问服务。</p>\n<p><code>interface``需要根据服务器网卡进行设置通常查看方式``ip addr</code></p>\n<p><code>authentication</code>  配置授权访问后备机也需要相同配置</p>\n</li>\n<li>\n<p><strong>修改备机（192.168.16.129）keepalived 配置文件</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#检测脚本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vrrp_script chk_http_port <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    script <span class=\"token string\">\"/usr/local/src/nginx_check.sh\"</span> <span class=\"token comment\">#心跳执行的脚本，检测 nginx 是否启动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    interval <span class=\"token number\">2</span>                          <span class=\"token comment\">#（检测脚本执行的间隔）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    weight <span class=\"token number\">2</span>                            <span class=\"token comment\">#权重</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#vrrp 实例定义部分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>vrrp_instance VI_1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    state BACKUP                        <span class=\"token comment\"># 指定 keepalived 的角色，MASTER 为主，BACKUP 为备</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    interface ens33                      <span class=\"token comment\"># 当前进行 vrrp 通讯的网络接口卡 (当前 centos 的网卡) 用 ifconfig 查看你具体的网卡</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    virtual_router_id <span class=\"token number\">66</span>                <span class=\"token comment\"># 虚拟路由编号，主从要一直</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    priority <span class=\"token number\">99</span>                         <span class=\"token comment\"># 优先级，数值越大，获取处理请求的优先级越高</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    advert_int <span class=\"token number\">1</span>                        <span class=\"token comment\"># 检查间隔，默认为 1s (vrrp 组播周期秒数)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">#授权访问</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    authentication <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        auth_type PASS <span class=\"token comment\">#设置验证类型和密码，MASTER 和 BACKUP 必须使用相同的密码才能正常通信</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        auth_pass <span class=\"token number\">1111</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    track_script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        chk_http_port                   <span class=\"token comment\">#（调用检测脚本）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    virtual_ipaddress <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token number\">192.168</span>.16.130                   <span class=\"token comment\"># 定义虚拟 ip (VIP)，可多设，每行一个</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>检测脚本：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#检测 nginx 是否启动了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx --no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$A</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>    <span class=\"token comment\">#如果 nginx 没有启动就启动 nginx                        </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      systemctl start nginx                <span class=\"token comment\">#重启 nginx</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx --no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>    <span class=\"token comment\">#nginx 重启失败，则停掉 keepalived 服务，进行 VIP 转移</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token function\">killall</span> keepalived                    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>分别启动两台服务器的 nginx 和 keepalived。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> keepalived restart\t<span class=\"token comment\">#启动 keepalived 虚拟机</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start keepalived.service <span class=\"token comment\">#启动 keepalived 服务器</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"安装ssl证书部署\"><a class=\"anchor\" href=\"#安装ssl证书部署\">#</a> 安装 SSL 证书 + 部署</h1>\n<ol>\n<li>\n<p>进入申请域名证书的网址，在里面输入想申请证书的域名，一定不要输入错误。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mcmVlc3NsLmNuLw==\">https://freessl.cn/</span></p>\n</li>\n<li>\n<p>安装<strong> KeyManager</strong> 并且打开他。</p>\n</li>\n<li>\n<p>进去登录，照着步骤走就是了。</p>\n<ul>\n<li>这里要求域名注测成功</li>\n<li>域名已经实名认证</li>\n<li>添加一条<strong> KeyManage</strong> 给的解析值，解析类型为 TXT。解析值为 KeyManage 给的值，华为云的添加解析记录需要加上英文状态下的双引号。</li>\n</ul>\n</li>\n<li>\n<p>添加解析值以后，下一步，检测配置。检测成功以后，会自动打包证书的。这时候下载保存。</p>\n</li>\n<li>\n<p>开始按照华为云的安装证书步骤一步一步的走</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS91c2VybWFudWFsLXNjbS9zY21fMDFfMDA4Mi5odG1sI3NjbV8wMV8wMDgyX196aC1jbl90b3BpY18wMDAwMDAxMTI0MjE3NjAxX3NjbV8wMV8wMDgyX3RhYmxlNDQ2MjY0ODE4MTUxNw==\">https://support.huaweicloud.com/usermanual-scm/scm_01_0082.html#scm_01_0082__zh-cn_topic_0000001124217601_scm_01_0082_table4462648181517</span></p>\n<ul>\n<li>\n<p>第一步</p>\n<p>先搞清楚是系统生成的，还是自己手动生成的。一般都是系统生成的。</p>\n<p>这时候你可以查看解压的文件夹中的 Nginx 文件夹。我用的是直接打开<strong> KeyManage</strong>，域名后面的三个小点，点开，直接查看 PEM。往下滑，就会看到证书链和私钥了。（私钥用的是 PKCS1 的）。点击一键部署，一般不成功。还是得自己写配置。</p>\n</li>\n<li>\n<p>第二步</p>\n<p>创建一个名字为 <code>cret</code>  的文件夹，这个文件夹里面创建两个文件分别是： <code>server.crt</code>  和 <code>server.key</code> 。其中，<strong>server.crt</strong> 中保存的是证书和证书链，<strong>server</strong> 中保存的是私钥。<mark>注意</mark>这里的 cret 这个文件夹，必须放在 nginx 配置文件的 nginx.conf 同路径下。因为下面配置路径的时候，不能写根路径。</p>\n</li>\n<li>\n<p>第三部</p>\n<p>修改配置文件，详情见 7.</p>\n</li>\n<li>\n<p>第四步</p>\n<p>检验，配置是否正确。在 **/usr/local/nginx** 目录下输入：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sbin/nginx -t</pre></td></tr></table></figure><p>如果显示以下类容，证明配置成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx.conf syntax is ok</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nginx.conf <span class=\"token builtin class-name\">test</span> is successful</pre></td></tr></table></figure><p>但是这里经常不成功。有可能是 nginx 没有打开 ssl 配置。这时候需要重新配置 nginx。方法如下。到时候再百度搜索这种报错，解决方案都一样。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>进入 Nginx 中进行配置。进入 nginx 的目录。 <code>/usr/local/nginx/conf/nginx.conf</code></p>\n</li>\n<li>\n<p>配置如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#user  nobody;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    include       mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">#  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">#access_log  logs/access.log  main;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    sendfile        on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># tcp_nopush     on;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># keepalive_timeout  0;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       listen       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#       server_name  123.60.51.170;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       server_name  www.xn--xkr52xh3grqg.cn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token builtin class-name\">return</span> <span class=\"token number\">301</span> https://<span class=\"token variable\">$server_name</span><span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token comment\"># rewrite ^(.*)$  https://$host$1 permanent; </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token comment\"># access_log  logs/host.access.log  main;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           root   html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           index  index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\"># 这是做动静分离加的测试页面。在 data 之下；</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        location /www/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\troot   /data/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            index  index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># 这是做动静分离添加的图片路径；</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tlocation /image/ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>               root   /data/<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               autoindex   on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\"># HTTPS server</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        listen\t\t<span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\"># listen\t\t123.60.51.170:9001;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        server_name  www.xn--xkr52xh3grqg.cn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#        rewrite ^(.*)$  https://$host$1 permanent; </span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">#        rewrite ^/(.*)$  http://www.xn--xkr52xh3grqg.cn/$1 permanent; </span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        ssl_certificate     cert/_server.crt<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        ssl_certificate_key  cert/_server.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        ssl_session_cache    shared:SSL:1m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        ssl_session_timeout  5m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ssl_ciphers  HIGH:<span class=\"token operator\">!</span>aNULL:<span class=\"token operator\">!</span>MD5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        ssl_prefer_server_ciphers  on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            root   html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            index  index.html index.htm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>网站配置好以后，重启 nginx 服务器。如果显示重定向次数过多。这有可能是配置中，同时使用配置了多个 server 模块。网上搜索 301 报错。可以解决。</p>\n</li>\n</ol>\n<h1 id=\"开启nginx的ssl模块\"><a class=\"anchor\" href=\"#开启nginx的ssl模块\">#</a> 开启 Nginx 的 SSL 模块</h1>\n<ol>\n<li>\n<p>Nginx 如果未开启 SSl 模块，配置 <code>https</code>  时会提示错误。</p>\n<p>原因很简单：nginx 缺少 http_ssl_module 模块，编译安装的时候带上 --with-http_ssl_module 配置就行了。</p>\n</li>\n<li>\n<p>Nginx 开启 SSL 模块</p>\n<p>切换到源码包：也就是自己的安装包所在的路径位置。</p>\n<pre><code class=\"language-sh\">cd /usr/src/nginx-1.14.2\n</code></pre>\n<p>查看 nginx 原来模块</p>\n<pre><code class=\"language-sh\">/usr/local/nginx/sbin/nginx -V\n</code></pre>\n<p>在 configure arguments: 后面显示的原有的 configure 参数如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--prefix<span class=\"token operator\">=</span>/usr/local/nginx --with-http_stub_status_module</pre></td></tr></table></figure><p>这个就是装好，有 SSL 模块的。</p>\n</li>\n<li>\n<p>新配置</p>\n<p>在我们的源码包路径下这样配置：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure --prefix<span class=\"token operator\">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</pre></td></tr></table></figure></li>\n<li>\n<p>配好了上面的配置以后，</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p><code>注意</code> ：这里不能配置 <mark>make install</mark>。否者就是覆盖安装了。</p>\n</li>\n<li>\n<p>备份原来安装好的 nginx</p>\n<p>这个是在哪里敲命令都可以，毕竟是复制嘛，只要写清楚复制什么的路径，复制到哪里，就可以了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</pre></td></tr></table></figure><p>这 nginx 安装的路径下，复制一个同路径的文件 来作为备份。</p>\n</li>\n<li>\n<p>停止 nginx。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> ./nginx</pre></td></tr></table></figure></li>\n<li>\n<p>复制刚编译好的 nginx，覆盖原来的 nginx。</p>\n<p>刚编译好的，就是在我们安装包路径下的 <code>./objs/nginx</code>  文件中。</p>\n<p>原来的就在原来安装的位置。 <code>/usr/local/nginx/sbin/</code></p>\n</li>\n<li>\n<p>启动 nginx。通过命令查看是否加入 SSL 模块成功</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/nginx/sbin/nginx -V</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Nginx",
                "Nginx"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/%E5%AD%A6%E4%B9%A0Linux/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Linux/%E5%AD%A6%E4%B9%A0Linux/",
            "title": "学习Linux",
            "date_published": "2021-05-18T16:00:00.000Z",
            "content_html": "<h1 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看所有端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">netstat</span> -tulnp</pre></td></tr></table></figure><h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h1>\n<p>学习视频地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBFNDExQzdobz9wPTEmYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXI=\"> LINUX</span></p>\n<p>[尚硅谷教学视频](http: <a href=\"//www.atguigu.com/download.shtml#linux\">//www.atguigu.com/download.shtml#linux</a>)</p>\n<p>安装下载位置，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81NTIxNzk4MDhlYmY=\">Linux</span></p>\n<p>安装好以后去安装 UBUNTU</p>\n<h1 id=\"linux文件系统\"><a class=\"anchor\" href=\"#linux文件系统\">#</a> linux 文件系统</h1>\n<p>linux 中没有盘符的概念，只有一个根目录。根目录用 <code>/</code>  表示。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210528135454791.png\" alt=\"image-20210528135454791\"></p>\n<ol>\n<li>\n<p><code>/</code>  根目录下有以下几个文件。</p>\n<ul>\n<li><code>/bin</code></li>\n<li><code>/etc</code></li>\n<li><code>/home</code></li>\n<li><code>/lib</code></li>\n<li><code>/usr</code></li>\n</ul>\n<p>这些不同的目录都有不同的作用。每个目录的作用介绍可查看<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9kdWFuamkvcC95dWVkaW5nMi5odG1s\"> Linux 目录介绍</span></p>\n</li>\n<li>\n<h2 id=\"linux常用命令\"><a class=\"anchor\" href=\"#linux常用命令\">#</a> Linux 常用命令</h2>\n<ul>\n<li>\n<p><strong>pwd</strong> 查看当前在那个目录以及是那个用户。当前路径。</p>\n</li>\n<li>\n<p><strong>ls</strong> 查看当前目录下有那些文件夹，有颜色的或者有后缀名的是文件夹，可以打开，没有的是文件。</p>\n</li>\n<li>\n<p><strong>cd</strong> 进入到文件夹。进去了之后可以用 <code>pwd</code>  查看，使用 cd 可以打开多级路径，用 / 隔开，表示子目录。== 注意：== 区分大小写</p>\n<ol>\n<li>\n<p>cd 快捷键，我们可以使用 <code>cd ..</code>  进入目录，cd 目录之下有些很长的文件夹名字，我们可能记不住，用 ls 查看很长也不想敲。这时候可以使用<strong> Tab</strong> 键，快捷键打出来。点一下是直接获取到输入的首字母的文件，两下是打开以你输入的字母开头的文件。</p>\n</li>\n<li>\n<p>回到家目录。直接</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token operator\">~</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p><strong>clear</strong>，清空屏幕命令。</p>\n</li>\n<li>\n<p><strong>ls -l</strong>: 罗列出目录，是以竖排这样的方式展示的，ls 后面也可以跟路径，此时，罗列出来的目录就是该路径下的目录。</p>\n</li>\n<li>\n<p><strong>ls -a</strong>: 罗列出影藏的文件目录。可以和<strong> ls -l</strong> 一起使用。</p>\n<p><code>**ls -l -a**</code> ：竖排查看所有文件，包含隐藏文件。</p>\n<p><code>**ls -lha**</code> ：竖排显示所有文件，包含隐藏文件，且大小以 <code>k</code>  单位显示出来</p>\n<p>只要是隐藏的文件或隐藏的文件夹。用 ls 查看到的都是前面带个小点的。</p>\n<p>在 Ubuntu 中，如果想创建一个隐藏的文件或者文件夹，只需要在前面加一个点。</p>\n<p><strong>通配符</strong>：类似正则表达式。</p>\n<ul>\n<li><code>*</code> ：表示一个或多个。</li>\n<li><code>？</code> ：一个字符。</li>\n<li>[1、2、3]，也是代表一个字符，但是只能从中括号中选择一个字符。</li>\n<li>[a-z]，是代表 a 到 z 中的任意一个字符。</li>\n</ul>\n</li>\n<li>\n<p><strong>mv</strong>：移动文件夹或文件，也就是剪切。如下：</p>\n<pre><code>mv ceshi.txt /home/siki/weiwei\nmv hello2.txt /home/siki/Desktop/aa/127.txt \t//移动以后改名字为127.txt\n</code></pre>\n<p>将 <code>ceshi.txt</code>  文件移动到 <code>/home/siki/weiwei</code>  文件夹之下。我们不但可以移动，还可以在移动的时候给他修改文件名字。也就是重命名。例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mv test demo\t<span class=\"token comment\">// 在当前文件夹中，移动 test 文件，且更换名字到当前文件夹。就是修改名字。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>cp</strong>：复制文件夹或文件，和移动类似。复制是不删除原来位置的文件。复制的过程中，也可以重新命名。<mark>注意：</mark><strong>cp</strong> 复制时如果是文件夹需要在前面加上  <code>-r</code> 。</p>\n</li>\n<li>\n<p><strong>find</strong>：精确搜索，</p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>find <span class=\"token monadic-operator operator\">/</span>home <span class=\"token function\">-</span>name test<span class=\"token dyadic-operator operator\">.</span>txt</pre></td></tr></table></figure><p>上面代码说明，在<strong> home</strong> 路径下搜索名字为<strong> test</strong> 的文件，只要是 home 下的任何子目录下的 test 文件都看搜索出来，搜索结果为：展示搜索文件的路径。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>name he<span class=\"token operator\">*</span> \t<span class=\"token comment\">// 名字中含有 he 的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>name <span class=\"token string\">'12*'</span>  <span class=\"token comment\">// 名字以 12 开头的文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>find <span class=\"token operator\">/</span>home <span class=\"token operator\">-</span>iname <span class=\"token string\">'abd'</span>\t\t<span class=\"token comment\">//\t名字为 abc 开头且不区分大小写。</span></pre></td></tr></table></figure><p>搜索<strong> home</strong> 之下所有目录中，<strong>名字</strong>带有<strong> he</strong> 的所有文件及文件夹。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>locate <span class=\"token number\">123</span>  <span class=\"token comment\">// 搜索索引库中的带有 123 的文件或者文件夹或者路径带有 123 的都索引出来。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>last</strong>：查看出远程登录记录，其中包括，远程登录的账号、IP、星期、日期、时间、操作时长。</p>\n</li>\n<li>\n<p><strong>echo $HISTSIZE</strong>：用这个命令可以查看 linux 最多可以保存多少行记录。</p>\n</li>\n<li>\n<p><strong>history|more</strong>：这个命令可以查看所有的操作记录。使用空格翻页、一页一页的查看。</p>\n</li>\n<li>\n<p><strong>history</strong>：查询最近的历史操作记录</p>\n</li>\n<li>\n<p><strong>top</strong>：top 命令经常用来监控 linux 的系统状况。能够实时显示系统中各个进程的资源占用情况。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看帮助手册， <code>需要查看帮助的命令</code>  + <code>–-help</code> ， <code>man</code>  + 需要查看的命令：如下</p>\n<pre><code>ls --help\nmv --help\n\nman ls\nman mv  \t//man命令使用q退出来。\n</code></pre>\n</li>\n<li>\n<p><strong>cat</strong>：查看文件内容。所有内容直接打印出来，适用于查看内容少的文件。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">-</span>b <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 查看文件 123.txt 的内容，使用 - b，是显示行号。此行号不包含空行。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cat <span class=\"token operator\">-</span>n <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 查看文件 123.txt 的内容，使用 - n，是显示行号。此行行包括空行。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>moar</strong>：也是查看文件内容。所有内容直接打印出来，适用于查看内容少的文件。这个会打印换行。其他的与 cat 相似。</p>\n</li>\n<li>\n<p><strong>grep</strong>：抓取文件中的内容；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grpe user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 搜索文件名为 123.txt 中，包含 user 字段的哪一行内容。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep <span class=\"token operator\">-</span>n user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 加上一个 - n，是为了显示搜索到的内容显示行号。空行也算行号的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grpe <span class=\"token operator\">-</span>v user <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 反向搜索，搜索文件名为 123.txt 中，不包含 user 字段的哪一行内容。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>grpe <span class=\"token operator\">^</span><span class=\"token string\">'#'</span> <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>services <span class=\"token comment\">// 抓取在 /etc/services 文件 中以 #开头的数据。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>grpe s$ <span class=\"token operator\">/</span>home <span class=\"token comment\">// 在 /home 中 以 s 结尾的 。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>grpe <span class=\"token operator\">-</span>i abc <span class=\"token number\">123.</span>txt <span class=\"token comment\">// 在 123.txt 中查找 abc。且忽略大小写。</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>&gt;</strong> 和 <strong>&gt;&gt;</strong> ：**&gt;<strong> 把得到或者查询出来的内容保存在其他文件夹，一个</strong> &gt;<strong> 代表是全部替换。两个</strong> &gt;&gt;** 代表是接在后面。比如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>grep siki <span class=\"token number\">123.</span>txt <span class=\"token operator\">></span> test<span class=\"token punctuation\">.</span>txt <span class=\"token comment\">// 抓取文件 123.txt 中，带有 siki 字段的内容 且 将它们保存或替换 test.txt 文件中的内容。如果没有 test.txt 文件。则会在当前目录下新创建一个 test.txt 文件用于保存抓取到的文件。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>grep siki <span class=\"token number\">123.</span>txt <span class=\"token operator\">>></span> text<span class=\"token punctuation\">.</span>txt <span class=\"token comment\">// 类似上面，唯一不懂的是，这个不是替换 text.txt 中的类容，而是将它接在 text.txt 文件内容的后面。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 例子如下：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ll <span class=\"token operator\">></span> <span class=\"token number\">123.</span>txt <span class=\"token comment\">//ll 以列表的形式查看当前目录。且把查看到的目录替换保存到 123.txt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ll <span class=\"token operator\">>></span> <span class=\"token number\">123.</span>txt <span class=\"token comment\">//ll 以列表的形式查看当前目录。且把查看到的目录保存到 123.txt 中</span></pre></td></tr></table></figure><p>总结：一个 <code>&gt;</code>  替换。两个 <code>&gt;&gt;</code>  加在后面。有 <code>text.txt</code>  文件。替换里面的内容，若没有，创建新的 <code>test.txt</code>  文件。</p>\n</li>\n<li>\n<p><strong>|</strong>：管道。相当于做一个命令的连接。将一个命令的输出改变为输入。</p>\n</li>\n<li>\n<p><strong>ln</strong>：软连接。相当于 windows 的桌面快捷方式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ln aa<span class=\"token operator\">/</span><span class=\"token number\">123.</span>txt aa_softlink <span class=\"token comment\">// 意思是 为 aa/123.txt 创建一个快捷方式，快捷方式的名字叫 aa_softlin</span></pre></td></tr></table></figure><p>修改快捷方式里面的内容，原文件中的内容也会同时被修改。</p>\n</li>\n</ol>\n<h1 id=\"用户管理-权限\"><a class=\"anchor\" href=\"#用户管理-权限\">#</a> 用户管理、权限。</h1>\n<ol>\n<li>添加用户：<strong>sudo</strong></li>\n</ol>\n<p><code>useradd</code> ：添加新用户。</p>\n<p><code>passwd</code> ：添加密码。</p>\n<p>初始用户可以使用<strong> sudo</strong> 添加新用户。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo useradd user1 <span class=\"token comment\">// 前面的是命令，user1 是需要添加的用户名。</span></pre></td></tr></table></figure><p>此处添加需要输入当前除使用户的登录密码作为验证。验证成功后，就可以创建成功了。我们用这个命令查看刚才创建的用户。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>passwd\t<span class=\"token comment\">// 查看服务器所有用户。</span></pre></td></tr></table></figure><p>查看到已经创建的用户以后，给创建的用户设置登录密码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo passwd user1 <span class=\"token comment\">// 使用命令 sudo + 密码 + 需要设置密码的用户名。这里需要重复一遍</span></pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource%5Cimages%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CLinux%5Cimage-20210527102243369.png\" alt=\"查看创建的用户\"></p>\n<ol start=\"2\">\n<li>\n<p>给 root 设置密码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo passwd root <span class=\"token comment\">//root 账户就是主账户，名字一般都是 root。</span></pre></td></tr></table></figure><p>给 root 设置密码的时候需要验证一下当前账户的密码。</p>\n</li>\n<li>\n<p><strong>切换用户</strong>：<strong>su</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>su root <span class=\"token comment\">// 使用 su + 需要切换的用户的名字</span></pre></td></tr></table></figure><p>切换成功以后输入密码登录。</p>\n</li>\n<li>\n<p><strong>退出 root</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exit <span class=\"token comment\">// 退出 root 以后，会自动回到初始账号上面去</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除用户：<strong>userdel</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>userdel user1 <span class=\"token comment\">// 删除用户名为 user1 的用户。不删除家目录 /home。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>userdel <span class=\"token operator\">-</span>r user1 <span class=\"token comment\">// 加上 - r 这参数，就删除用户的家目录 /home。</span></pre></td></tr></table></figure></li>\n<li>\n<p>用户组。</p>\n<ul>\n<li>\n<p>添加用户组：<strong>groupadd</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupadd group1 <span class=\"token comment\">// 添加一个组名为 group1 的用户组</span></pre></td></tr></table></figure><p>使用 <code>cat /etc/group</code>  查看是否添加成功。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>group <span class=\"token comment\">// 查看是否添加成功。</span></pre></td></tr></table></figure></li>\n<li>\n<p>修改用户组：<strong>groupmod</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupmod <span class=\"token operator\">-</span>n group1_new gronp <span class=\"token comment\">// 需要加一个 - n 参数。这里注意先写需要改的名字，后面才写改的是哪个组。</span></pre></td></tr></table></figure></li>\n<li>\n<p>用户组的删除：<strong>groupdel</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groupdel group1 <span class=\"token comment\">// 直接删除命令加需要删除的组的名字。</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件：<strong>passwd</strong></p>\n<pre><code>cat /etc/passwd // 操作系统下的配置文件。配置用户的配置。\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>文件的权限</p>\n<ul>\n<li>\n<p>&lt;img src=&quot;../../../../images/ 扩展知识 / Linux/image-20210527173252136.png&quot; alt=&quot;image-20210527173252136&quot;  /&gt;</p>\n</li>\n<li>\n<p>使用 <code>ll</code>  命令查询出来之后，文件前面总是用很多 <code>-</code> 。前面的第一个是 d，代表是文件夹，可以打开。第一个是 <code>-</code>  代表是文件。后面的 9 个 <code>-</code> 。前三个代表的是自己可以操作的权限。中间三个代表的是组<strong> group</strong> 可以操作的权限。最后一个代表其他人可以操作的权限。</p>\n</li>\n<li>\n<p>其中：R W X 对应的是可读（read）、可写（write）、可执行（excute）。</p>\n</li>\n<li>\n<p>修改权限：<strong>chmod</strong></p>\n<ol>\n<li>\n<p>u：代表当前使用的用户。第 123 个 <code>-</code></p>\n</li>\n<li>\n<p>g：代表该用户所在的组。第 456 个 <code>-</code></p>\n</li>\n<li>\n<p>o：代表其他用户的权限。第 789 个 <code>-</code></p>\n</li>\n<li>\n<p>a：代表 <strong>u、g、o</strong> 全部修改。</p>\n<p><strong>小结:<strong> 每个</strong> u、g、o</strong> 中。又有<strong> r、w、x</strong> 对应的读、写、执行权限</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chmod u<span class=\"token operator\">+</span>x <span class=\"token comment\">// 这个意思是，使用修改权限的命令。u 代表是给当前使用的用户，该 user 用户，修改，+ 就是加，给它添加一个权限。加一个 x 权限。x 为可以执行的权限。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chmod g<span class=\"token operator\">+</span>w <span class=\"token comment\">// 用户组的可写权限打开。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod o<span class=\"token operator\">+</span>wx <span class=\"token comment\">// 其他用户的写、执行权限打开。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>chmod a<span class=\"token operator\">-</span>x <span class=\"token comment\">// 全部的可执行权限关闭。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>chmod u<span class=\"token operator\">=</span>rwx <span class=\"token comment\">// 将 u（当前用户的 rwx 可读、可写、可执行）权限设置为打开。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>chmod u<span class=\"token operator\">=</span>rwx g<span class=\"token operator\">=</span>rw o<span class=\"token operator\">=</span>rwx <span class=\"token comment\">// 可以多个修改。</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用数字代表权限。 <code>r = 4，w = 2， x = 1</code> 。设置多权限就把对应的数组加起来。如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chmod <span class=\"token number\">777</span> test <span class=\"token comment\">// 修改 test 文件夹的权限为 a（所以用户）rwx。可读、可写、可执行。这里的第一个 7 代表的是 u（user 自己）、第二个 7 代表的是 g（用户组）、第三个 o（他们、其他人）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chmod <span class=\"token number\">774</span> test <span class=\"token comment\">// 意思为：u（自己）和 g（组）权限为可读可写，o（其他人）权限为只读。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chmod <span class=\"token number\">444</span> test <span class=\"token comment\">// 包括自己在内的所有人员权限为：只读。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>chmod <span class=\"token number\">764</span> test <span class=\"token comment\">//u（自己）可读可写可执行，g（组）可读可写 不可执行，o（其他人）只能读。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>chmod <span class=\"token operator\">-</span>r <span class=\"token number\">444</span> test <span class=\"token comment\">// 加上一个 - r 是代表把文件夹下面的文件及文件夹的权限都改了。</span></pre></td></tr></table></figure><p>这里只有三个数字是因为一个数字代表三个 <code>-</code> 。具体的权限看他的数字的总和。</p>\n</li>\n<li>\n<p>修改所属人、所属组。</p>\n<ol>\n<li>\n<p><strong>chown</strong>：修改所属人。</p>\n<p>这里需要注意的是，修改所属人估计权限不够，所以我们在前面加一个 sudo。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo chown user test <span class=\"token comment\">// 修改 test 文件夹的所属人为 user</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>chgrp</strong>：修改所有组。</p>\n<p>也是权限不够，需要在前面加上 sudo。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo chgrp user test <span class=\"token comment\">// 修改 test 文件夹的所属组为 user</span></pre></td></tr></table></figure><p>&lt;img src=&quot;../../../../images/ 扩展知识 / Linux/image-20210528112234389.png&quot; alt=&quot;image-20210528112234389&quot; style=&quot;zoom:;&quot; /&gt;</p>\n<p>也都可以加上 **-r**，递归。也就是所有的子文件、子文件夹都修改问这个所属用户、所属组。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"在linux系统中安装tomcat\"><a class=\"anchor\" href=\"#在linux系统中安装tomcat\">#</a> 在 Linux 系统中安装 Tomcat</h1>\n<h2 id=\"安装jdk\"><a class=\"anchor\" href=\"#安装jdk\">#</a> 安装 JDK</h2>\n<p>安装 tomcat 之前，必须要安装 JDK。</p>\n<h3 id=\"使用yum一键安装\"><a class=\"anchor\" href=\"#使用yum一键安装\">#</a> 使用 yum 一键安装</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y java-1.8.0-openjdk-devel // 这里装完以后记得去配置jdk环境变量</pre></td></tr></table></figure><h3 id=\"查看java版本\"><a class=\"anchor\" href=\"#查看java版本\">#</a> 查看 java 版本</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java -version</pre></td></tr></table></figure><h2 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h2>\n<h3 id=\"找到java安装的路径\"><a class=\"anchor\" href=\"#找到java安装的路径\">#</a> 找到 java 安装的路径</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">whereis</span> java // 查看路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// /usr/bin/java /usr/lib/java /etc/java /usr/share/java /usr/share/man/man1/java.1.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">ls</span> -lrt /usr/bin/java // 查看java的bin之下路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// /usr/bin/java -<span class=\"token operator\">></span> /etc/alternatives/java</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">ls</span> -lrt /etc/alternatives/java // 查看需要配置环境的路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> // /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64/jre/bin/java</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java</pre></td></tr></table></figure><h3 id=\"进入文件夹配置环境变量\"><a class=\"anchor\" href=\"#进入文件夹配置环境变量\">#</a> 进入文件夹配置环境变量</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/profile // 进入java环境变量配置单的文件</pre></td></tr></table></figure><p><code>在文件的末尾处添加以下代码：</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el8_4.x86_64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$JAVA_HOME</span>/jre/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/lib/tools.jar</pre></td></tr></table></figure><p><code>注意：</code> 上面代码的第一行，**export JAVA_HOME=** 之后，改为你自己的路径，切注意，路径不包含版本号、系统号之后的 <code>/jre/bin/java</code>  这个路径。</p>\n<h3 id=\"使配置生效\"><a class=\"anchor\" href=\"#使配置生效\">#</a> 使配置生效</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><h3 id=\"查看java_home环境变量\"><a class=\"anchor\" href=\"#查看java_home环境变量\">#</a> 查看 JAVA_HOME 环境变量</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$JAVA_HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64</pre></td></tr></table></figure><h1 id=\"下载tomcat\"><a class=\"anchor\" href=\"#下载tomcat\">#</a> 下载 Tomcat</h1>\n<p>进入 Tomcat 官网下载页面，下载需要的版本的 Tomcat。官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy9kb3dubG9hZC04MC5jZ2k=\">Tomcat</span></p>\n<h1 id=\"安装tomcat\"><a class=\"anchor\" href=\"#安装tomcat\">#</a> 安装 Tomcat</h1>\n<p>把下载好的压缩包，上传到 Linux 系统中。</p>\n<ol>\n<li>\n<p>创建目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /usr/local/tomcat/</pre></td></tr></table></figure></li>\n<li>\n<p>解压到需要安装的目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf apache-tomcat-8.5.49.tar.gz -C /usr/local/tomcat/</pre></td></tr></table></figure><p>解压缩以后，进入 /usr/local/tomcat/ 目录后，你会发现多一个目录，它就是 Tomcat 所在目录。Tomcat 版本不同，这个目录名有所不同，这里是<strong> apache-tomcat-8.5.49</strong>。</p>\n</li>\n<li>\n<p>启动</p>\n<p>执行 Tomcat 的启动脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/tomcat/apache-tomcat-8.5.49/bin/startup.sh</pre></td></tr></table></figure><p>返回的结果如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.49</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.49</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.49/temp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Using JRE_HOME: /usr/local/java/jdk1.8.0_231/jre</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Using CLASSPATH: /usr/local/tomcat/apache-tomcat-8.5.49/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.49/bin/tomcat-juli.jar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Tomcat started.</pre></td></tr></table></figure><p>启动完成以后。</p>\n</li>\n<li>\n<p>验证</p>\n<p>Tomcat 默认端口是 8080，在浏览器中输入对应 IP 和端口，比如：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMS4xMTE6ODA4MA==\">http://192.168.1.111:8080</span>，就可以访问了</p>\n</li>\n</ol>\n<h1 id=\"在tomcat上部署项目\"><a class=\"anchor\" href=\"#在tomcat上部署项目\">#</a> 在 Tomcat 上部署项目</h1>\n<p>把需要部署的项目放到 webapp 目录之下。这时候我们输入自己的 ip:8080 / 项目文件名 /index.html 可以正常的查看到我们的项目。但这个时候，我们发现，在访问我们的项目内容时，必须加上我们的项目名字 &quot;myweb&quot;，这样很不好。</p>\n<ol>\n<li>\n<p>我们可以编辑 conf/server.xml 进行配置，打开 server.xml 文件，找到 Host 元素，默认配置如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Host <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span>  <span class=\"token assign-left variable\">appBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"webapps\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token assign-left variable\">unpackWARs</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">autoDeploy</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Context <span class=\"token assign-left variable\">docBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"myProject\"</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- SingleSignOn valve, share authentication between web applications</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         Documentation at: /docs/config/valve.html --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.authenticator.SingleSignOn\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- Access log processes all example.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         Documentation at: /docs/config/valve.html</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         Note: The pattern used is equivalent to using <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"common\"</span> --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"token assign-left variable\">directory</span><span class=\"token operator\">=</span><span class=\"token string\">\"logs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token assign-left variable\">prefix</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost_access_log\"</span> <span class=\"token assign-left variable\">suffix</span><span class=\"token operator\">=</span><span class=\"token string\">\".txt\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">&lt;</span>/Host<span class=\"token operator\">></span></pre></td></tr></table></figure><p>我们需要在 Host 内部增加 Context 的内容，增加之后如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Host <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span>  <span class=\"token assign-left variable\">appBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"webapps\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token assign-left variable\">unpackWARs</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">autoDeploy</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Context <span class=\"token assign-left variable\">docBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"myProject\"</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- SingleSignOn valve, share authentication between web applications</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         Documentation at: /docs/config/valve.html --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.authenticator.SingleSignOn\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- Access log processes all example.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         Documentation at: /docs/config/valve.html</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         Note: The pattern used is equivalent to using <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"common\"</span> --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"token assign-left variable\">directory</span><span class=\"token operator\">=</span><span class=\"token string\">\"logs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token assign-left variable\">prefix</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost_access_log\"</span> <span class=\"token assign-left variable\">suffix</span><span class=\"token operator\">=</span><span class=\"token string\">\".txt\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">&lt;</span>/Host<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这个时候，就可以通过这种不用加项目名的 http://localhost:8080/index.html 形式访问了</p>\n<p>这里需要 == 注意：== 的是</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Context <span class=\"token assign-left variable\">docBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"myProject\"</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>/<span class=\"token operator\">></span></pre></td></tr></table></figure><p>docBase 后面跟的是我们的项目名称。</p>\n</li>\n</ol>\n<h1 id=\"linux下重启tomcat\"><a class=\"anchor\" href=\"#linux下重启tomcat\">#</a> Linux 下重启 Tomcat</h1>\n<ol>\n<li>\n<p>进入 linux 系统下 Tomcat 的 bin 目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/tomcat/apache-tomcat-8.5.30/bin</pre></td></tr></table></figure></li>\n<li>\n<p>关闭一下 Tomcat 服务，特别是已经启动的情况下，只不过有些异常</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./shutdown.sh</pre></td></tr></table></figure></li>\n<li>\n<p>检查一下 tomcat 是否确实已经关闭</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> java</pre></td></tr></table></figure><p>假如出现以下类似的提示，表示 tomcat 已经关闭</p>\n<p><code>root       16117   16036  0 13:51 pts/0    00:00:00 grep --color=auto java</code></p>\n</li>\n<li>\n<p>最后重新启动 tomcat</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./startup.sh</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"tomcat部署域名证书\"><a class=\"anchor\" href=\"#tomcat部署域名证书\">#</a> Tomcat 部署域名 + 证书</h1>\n<p>部署步骤：</p>\n<ol>\n<li>搭建 Tomcat 环境。</li>\n<li>申请域名证书。</li>\n<li>部署域名的 http 访问。</li>\n<li>部署域名的 https 访问。</li>\n<li>强制使 http 跳转至 https。</li>\n</ol>\n<p>我这里从第三步开始。</p>\n<h2 id=\"部署域名的http访问\"><a class=\"anchor\" href=\"#部署域名的http访问\">#</a> 部署域名的 http 访问。</h2>\n<p>部署好 Tomcat 后，找到对应目录下的 conf 文件找到 server.xml 文件修改对应的配置。找到 Host 添加域名绑定配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Host <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"www.xn--xkr52xh3grqg.cn\"</span>  <span class=\"token assign-left variable\">appBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"webapps\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>              <span class=\"token assign-left variable\">unpackWARs</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">autoDeploy</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Context <span class=\"token assign-left variable\">docBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"myProject\"</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- SingleSignOn valve, share authentication between web applications</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             Documentation at: /docs/config/valve.html --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.authenticator.SingleSignOn\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- Access log processes all example.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             Documentation at: /docs/config/valve.html</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             Note: The pattern used is equivalent to using <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"common\"</span> --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Valve <span class=\"token assign-left variable\">className</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"token assign-left variable\">directory</span><span class=\"token operator\">=</span><span class=\"token string\">\"logs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>               <span class=\"token assign-left variable\">prefix</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost_access_log\"</span> <span class=\"token assign-left variable\">suffix</span><span class=\"token operator\">=</span><span class=\"token string\">\".txt\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span>/Host<span class=\"token operator\">></span></pre></td></tr></table></figure><p><code>配置详情：</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Host <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"域名\"</span>  <span class=\"token assign-left variable\">appBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"webapps\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t <span class=\"token assign-left variable\">unpackWARs</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">autoDeploy</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t <span class=\"token operator\">&lt;</span>Context <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token assign-left variable\">docBase</span><span class=\"token operator\">=</span><span class=\"token string\">\"网站文件路径\"</span>/<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span>/Host<span class=\"token operator\">></span></pre></td></tr></table></figure><p>测试域名访问成功后，进行下一步测试。</p>\n<h2 id=\"配置域名https访问\"><a class=\"anchor\" href=\"#配置域名https访问\">#</a> 配置域名 https 访问</h2>\n<p>将域名的 ssl 证书放到 Tomcat 中的 conf 文件中。在 server.xml 文件中找到 ssl 配置中做如下配置修改：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Connector <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token string\">\"443\"</span> <span class=\"token assign-left variable\">protocol</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.coyote.http11.Http11NioProtocol\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>               <span class=\"token assign-left variable\">maxThreads</span><span class=\"token operator\">=</span><span class=\"token string\">\"150\"</span> <span class=\"token assign-left variable\">SSLEnabled</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">defaultSSLHostConfigName</span><span class=\"token operator\">=</span><span class=\"token string\">\"www.xn--xkr52xh3grqg.cn\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>SSLHostConfig <span class=\"token assign-left variable\">hostName</span><span class=\"token operator\">=</span><span class=\"token string\">\"www.xn--xkr52xh3grqg.cn\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;</span>Certificate <span class=\"token assign-left variable\">certificateKeystoreFile</span><span class=\"token operator\">=</span><span class=\"token string\">\"conf/qianmonianhua.jks\"</span> <span class=\"token assign-left variable\">certificateKeystorePassword</span><span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"RSA\"</span> /<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>/SSLHostConfig<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>/Connector<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这一段仔细找，默认是写好了的。但是是注释的。我们需要把注释符号去掉。</p>\n<p><code>配置详情：</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Connector <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token string\">\"443\"</span> <span class=\"token assign-left variable\">protocol</span><span class=\"token operator\">=</span><span class=\"token string\">\"org.apache.coyote.http11.Http11Nio2Protocol\"</span> <span class=\"token assign-left variable\">maxThreads</span><span class=\"token operator\">=</span><span class=\"token string\">\"150\"</span> <span class=\"token assign-left variable\">SSLEnabled</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token assign-left variable\">defaultSSLHostConfigName</span><span class=\"token operator\">=</span><span class=\"token string\">\"域名\"</span><span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>SSLHostConfig <span class=\"token assign-left variable\">hostName</span><span class=\"token operator\">=</span><span class=\"token string\">\"域名\"</span><span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>Certificate <span class=\"token assign-left variable\">certificateKeystoreFile</span><span class=\"token operator\">=</span><span class=\"token string\">\"conf/证书路径以及名称\"</span> <span class=\"token assign-left variable\">certificateKeystorePassword</span><span class=\"token operator\">=</span><span class=\"token string\">\"证书密码\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"RSA\"</span>/<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span>/SSLHostConfig<span class=\"token operator\">></span>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>/Connector<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这里一定不要忘了第一行上面的  <code>defaultSSLHostConfigName=&quot;域名&quot;</code> ，否则会出现 404！</p>\n<p>为了做强制 https。所以我也在这时候修改了如下配置：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Connector <span class=\"token assign-left variable\">port</span><span class=\"token operator\">=</span><span class=\"token string\">\"80\"</span> <span class=\"token assign-left variable\">protocol</span><span class=\"token operator\">=</span><span class=\"token string\">\"HTTP/1.1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token assign-left variable\">connectionTimeout</span><span class=\"token operator\">=</span><span class=\"token string\">\"20000\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token assign-left variable\">redirectPort</span><span class=\"token operator\">=</span><span class=\"token string\">\"443\"</span> /<span class=\"token operator\">></span></pre></td></tr></table></figure><p>redirectPort 改成 ssl 的 connector 的端口 443，重启后便会生效</p>\n<h2 id=\"强制使http跳转至https\"><a class=\"anchor\" href=\"#强制使http跳转至https\">#</a> 强制使 http 跳转至 https</h2>\n<p>到 conf 目录下的 web.xml。在 &lt;/welcome-file-list&gt; 后面，&lt;/web-app&gt;，也就是倒数第二段里，加上这样一段</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>login-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- Authorization setting <span class=\"token keyword\">for</span> SSL --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>auth-method<span class=\"token operator\">></span>CLIENT-CERT<span class=\"token operator\">&lt;</span>/auth-method<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>realm-name<span class=\"token operator\">></span>Client Cert Users-only Area<span class=\"token operator\">&lt;</span>/realm-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/login-config<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>security-constraint<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>-- Authorization setting <span class=\"token keyword\">for</span> SSL --<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>web-resource-collection<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>web-resource-name<span class=\"token operator\">></span>SSL<span class=\"token operator\">&lt;</span>/web-resource-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>url-pattern<span class=\"token operator\">></span>/*<span class=\"token operator\">&lt;</span>/url-pattern<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/web-resource-collection<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>user-data-constraint<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>transport-guarantee<span class=\"token operator\">></span>CONFIDENTIAL<span class=\"token operator\">&lt;</span>/transport-guarantee<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/user-data-constraint<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span>/security-constraint<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这一段在 <code>web.xml</code>  文件的最下面。最后的位置。加上保存即可。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Docker/Docker/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Docker/Docker/",
            "title": "学习Docker",
            "date_published": "2021-05-17T16:00:00.000Z",
            "content_html": "<h1 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<blockquote>\n<ol>\n<li>\n<p>Docker 容器信息</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 查看 docker 容器版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker version</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## 查看 docker 容器信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker info</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## 查看 docker 容器帮助</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>docker --help</pre></td></tr></table></figure></li>\n<li>\n<p>镜像操作</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看本地所有镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker images </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 启动并进入镜像</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> docker run -it + 镜像名字：版本号 + /bin/bash</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 如果只加名字，就默认下载最新版本的启动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 第一次启动镜像</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> docker run -d -p <span class=\"token number\">3310</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> -d <span class=\"token comment\"># 后台运行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> -p <span class=\"token comment\"># 3310:3306 暴露端口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> -v <span class=\"token comment\"># 挂载数据，自动备份、路径</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> /home/mysql/conf:/etc/mysql/conf.d  这是映射配置文件的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> /home/mysql/data:/var/lib/mysql\t这是映射配置数据文件的。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 显示镜像 ID</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>docker images -a</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>docker images -aq</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 搜索仓库 MySQL 镜像</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>docker search mysql</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 下载 Redis 官方最新镜像，相当于：docker pull redis:latest</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>docker pull redis</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 下载仓库所有 Redis 镜像</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>docker pull -a redis</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 下载私人仓库镜像</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>docker pull bitnami/redis</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 单个镜像删除，相当于：docker rmi redis:latest</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>docker rmi redis</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 强制删除 (针对基于镜像有运行的容器进程)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>docker rmi -f redis</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 删除本地全部镜像</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>docker rmi -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -q<span class=\"token variable\">)</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>容器的操作</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看正在运行的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   docker <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\"># 显示所有的容器，包括未运行的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   docker <span class=\"token function\">ps</span> -a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\"># 启动容器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   docker start 容器id\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\"># 进入正在运行的命令行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   docker <span class=\"token builtin class-name\">exec</span> -it + 容器id /bin/bash</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   docker attach 容器id\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\"># 运行并进入容器。  使用 exit 退出，或者 ctrl+p+q，退出。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   docker run -it + 名字 + /bin/bash</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\"># 强制删除已经启动的容器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   docker <span class=\"token function\">rm</span> -f + ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\"># 强制删除所有已经启动的容器。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   docker <span class=\"token function\">rm</span> -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\"># 删除容器中没有运行的容器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token function\">sudo</span> docker <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">sudo</span> docker <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token comment\"># 列出容器中的进程</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   docker <span class=\"token function\">top</span> + ID</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\"># 查看容日的日志</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   docker logs -f -t --tail<span class=\"token operator\">=</span><span class=\"token number\">5</span> + ID </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token comment\"># -f 跟踪日志输出</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token comment\"># -t 显示时间戳</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token comment\"># --tail=N 列出最新的 N 条内容。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\"># 查看容器 tomcat 从 2021 年 04 月 21 日后的最新 3 条日志。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   docker logs --since<span class=\"token operator\">=</span><span class=\"token string\">\"2021-04-21\"</span> --tail<span class=\"token operator\">=</span><span class=\"token number\">3</span> 5afc660a7c3d</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   docker restart 容器id\t<span class=\"token comment\"># 重启容器</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   docker stop 容器id\t<span class=\"token comment\"># 停止当前正在运行的容器</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   docker <span class=\"token function\">kill</span> 容器id\t<span class=\"token comment\"># 杀死当前正在运行的容器</span></pre></td></tr></table></figure></li>\n<li>\n<p>其他扩展</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看容器的日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker logs -f -t --tail 容器ID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-f <span class=\"token comment\"># 跟随最新的日志打印</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-t <span class=\"token comment\"># 是加入的时间戳</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--tail <span class=\"token comment\"># 显示最后多少条</span></pre></td></tr></table></figure></li>\n</ol>\n</blockquote>\n<h1 id=\"docker-学习路径\"><a class=\"anchor\" href=\"#docker-学习路径\">#</a> Docker 学习路径</h1>\n<p>学习视频地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW9nNHkxcTdNND9wPTE=\"> Docker</span></p>\n<ol>\n<li>Docker 概述</li>\n<li>Docker 安装</li>\n<li>Docker 命令\n<ul>\n<li>镜像命令</li>\n<li>容器命令</li>\n<li>操作命令</li>\n</ul>\n</li>\n<li>Docker 镜像！</li>\n<li>容器数据卷！</li>\n<li>DockerFile</li>\n<li>Docker 网络原理</li>\n<li>IDEA 整合 Docker</li>\n<li>Docker Compose</li>\n<li>Docker Swarm</li>\n<li>CI、CD Jenkins</li>\n</ol>\n<h1 id=\"安装docker\"><a class=\"anchor\" href=\"#安装docker\">#</a> 安装 Docker</h1>\n<blockquote>\n<p>准备环境</p>\n</blockquote>\n<ol>\n<li>需要会一点 Linux 的基础</li>\n<li>CentOS 7 及以上版本</li>\n<li>我们使用 Xshell 连接远程服务器进行操作！</li>\n</ol>\n<blockquote>\n<p>环境查看</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 系统内核是 3.0 以上的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">uname</span> -r</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4.18</span>.0-240.10.1.el8_3.x86_64</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 系统版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/os-release </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"CentOS Linux\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">VERSION</span><span class=\"token operator\">=</span><span class=\"token string\">\"8\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"centos\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">ID_LIKE</span><span class=\"token operator\">=</span><span class=\"token string\">\"rhel fedora\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">VERSION_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"8\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">PLATFORM_ID</span><span class=\"token operator\">=</span><span class=\"token string\">\"platform:el8\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">PRETTY_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"CentOS Linux 8\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">ANSI_COLOR</span><span class=\"token operator\">=</span><span class=\"token string\">\"0;31\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">CPE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"cpe:/o:centos:centos:8\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">HOME_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://centos.org/\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">BUG_REPORT_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://bugs.centos.org/\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">CENTOS_MANTISBT_PROJECT</span><span class=\"token operator\">=</span><span class=\"token string\">\"CentOS-8\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">CENTOS_MANTISBT_PROJECT_VERSION</span><span class=\"token operator\">=</span><span class=\"token string\">\"8\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan sbin<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><blockquote>\n<p>安装</p>\n</blockquote>\n<p>查看官网的帮助文档：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、卸载旧的版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum remove docker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                  docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  docker-engine</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 2、需要的安装包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 3、设置镜像的仓库 使用国内阿里云的镜像仓库</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 更新 yum 软件包的索引</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>yum makecache fast</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 4、安装 docker 相关的类容 docker-ce 社区版本 docker-ee 企业版</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>yum <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 5、启动 docker</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>systemctl start docker</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 6、使用 docker version 查看是否安装成功。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>docker version</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 7、hello-world</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>docker run hello-world</pre></td></tr></table></figure><p>&lt;img src=&quot;e:\\<span class=\"exturl\" data-url=\"aHR0cDovL0xrbHl4LmdpdGh1Yi5pbw==\">Lklyx.github.io</span>\\source_posts\\Growth-Diary\\ 扩展知识 \\Docker\\image\\1.png&quot;alt=&quot;image-20210616175154839&quot;  /&gt;</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 8、查看一下下载的这个 hello-world 镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker images</pre></td></tr></table></figure><h2 id=\"了解怎么卸载docker\"><a class=\"anchor\" href=\"#了解怎么卸载docker\">#</a> 了解：怎么卸载 docker</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、卸载依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum remove docker-ce docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 2、删除 docker 资源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/docker</pre></td></tr></table></figure><h2 id=\"底层原理\"><a class=\"anchor\" href=\"#底层原理\">#</a> 底层原理</h2>\n<p><strong>Docker 是什么工作的？</strong></p>\n<p>Docker 是一个 Client - Server 结构的系统，Docker 的守护进程运行在主机上</p>\n<h1 id=\"docker的常用命令\"><a class=\"anchor\" href=\"#docker的常用命令\">#</a> Docker 的常用命令</h1>\n<h2 id=\"设置自动启动\"><a class=\"anchor\" href=\"#设置自动启动\">#</a> 设置自动启动</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> docker.service</pre></td></tr></table></figure><h2 id=\"帮助命令\"><a class=\"anchor\" href=\"#帮助命令\">#</a> 帮助命令</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker version <span class=\"token comment\"># 查看 docker 的版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker info <span class=\"token comment\"># 查看 docker 的更加详细信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker --help <span class=\"token comment\"># 万能命令</span></pre></td></tr></table></figure><p>帮助文档的地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9jbGkv\">https://docs.docker.com/engine/reference/commandline/cli/</span></p>\n<h2 id=\"镜像命令\"><a class=\"anchor\" href=\"#镜像命令\">#</a> 镜像命令</h2>\n<p><strong>docker images</strong> 查看所有本地的主机上的镜像。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hello-world   latest    d1165f221234   <span class=\"token number\">3</span> months ago   <span class=\"token number\">13</span>.3kB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 解释</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>REPOSITORY 镜像的仓库源</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>TAG        镜像的标签</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>IMAGE ID   镜像的ID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CREATED    镜像的创建时间</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SIZE       镜像的大小</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 可选性</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-a， --all\t\t\t<span class=\"token comment\"># 列出所有镜像</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>-q， --quiet\t\t\t<span class=\"token comment\"># 只显示镜像 ID</span></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker search mysql</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mysql                             MySQL is a widely used, open-source relation…   <span class=\"token number\">11003</span>     <span class=\"token punctuation\">[</span>OK<span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mariadb                           MariaDB Server is a high performing <span class=\"token function\">open</span> sou…   <span class=\"token number\">4169</span>      <span class=\"token punctuation\">[</span>OK<span class=\"token punctuation\">]</span>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 可选性，通过搜索来过滤</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--filter<span class=\"token operator\">=</span>STARS<span class=\"token operator\">=</span><span class=\"token number\">3000</span> <span class=\"token comment\"># 搜索出来的镜像就是 STARS 大于 3000 的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker search mysql --filter=STARS=3000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mysql     MySQL is a widely used, open-source relation…   <span class=\"token number\">11003</span>     <span class=\"token punctuation\">[</span>OK<span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mariadb   MariaDB Server is a high performing <span class=\"token function\">open</span> sou…   <span class=\"token number\">4169</span>      <span class=\"token punctuation\">[</span>OK<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 下载镜像 docker pull + 镜像名 +[tag] 版本号 \t镜像名以后可以加下载版本。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker pull mysql</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Using default tag: latest\t<span class=\"token comment\"># 如果不写 tag 版本。默认就是 latest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>latest: Pulling from library/mysql</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>69692152171a: Pull complete \t<span class=\"token comment\"># 分层下载，docker image 的核心 联合文件系统</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1651b0be3df3: Pull complete </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>951da7386bc8: Pull complete </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>0f86c95aa242: Pull complete </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>37ba2d8bd4fe: Pull complete </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>6d278bb05e94: Pull complete </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>497efbd93a3e: Pull complete </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>f7fddf10c2c2: Pull complete </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>16415d159dfb: Pull complete </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>0e530ffc6b73: Pull complete </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>b0a4a1a77178: Pull complete </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cd90f92aa9ef: Pull complete </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Digest: sha256:d50098d7fcb25b1fcb24e2d3247cae3fc55815d64fec640dc395840f8fa80969\t<span class=\"token comment\"># 签名</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Status: Downloaded newer image <span class=\"token keyword\">for</span> mysql:latest</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>docker.io/library/mysql:latest <span class=\"token comment\"># 真实地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 等价于它</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>docker pull mysql</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>docker pull docker.io/library/mysql:latest</pre></td></tr></table></figure><p><strong>docker rmi 删除镜像</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker rmi -f + 容器id\t\t<span class=\"token comment\"># 删除指定的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker rmi -f + 容器id + 容器id + 容器id\t\t<span class=\"token comment\">#删除多个容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker rmi -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker images -aq<span class=\"token variable\">)</span></span>\t\t<span class=\"token comment\"># 删除全部的容器。</span></pre></td></tr></table></figure><h2 id=\"容器命令\"><a class=\"anchor\" href=\"#容器命令\">#</a> 容器命令</h2>\n<blockquote>\n<p>说明：我们有了镜像才可以创建容器，linux，下载一个 Cent OS 镜像来测试学习。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull centos</pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run <span class=\"token punctuation\">[</span>可选参数<span class=\"token punctuation\">]</span> images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 参数说明</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--name<span class=\"token operator\">=</span><span class=\"token string\">\"Name\"</span>\t\t 容器名字 tomcat1，tomcat2，用来区分容器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-d\t\t\t\t\t后台方式运行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-it\t\t\t\t\t使用交互方式运行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-P\t\t\t\t\t大写P\t指定容器的端口 -p <span class=\"token number\">8080</span>:8080。有以下四种方式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t-P ip:主机端口:容器端口</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t-P 主机端口:容器端口 （常用）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t-P 容器端口</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t容器端口</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-p\t\t\t小写p\t随机指定端口</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 测试 启动并进入容器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run -it centos /bin/bash</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 解释：启动 docker run ，使用 it 交互方式运行，运行 centos。linux 中，控制台一般是在 /bin 目录下面，bin 目录下面，使用 bash 命令运行。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>root@9456c976569b /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 退出容器命令</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Ctrl p Q</pre></td></tr></table></figure><p><strong>列出所有运行中的容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># docker ps\t命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-a <span class=\"token comment\"># 列出当前正在运行的容器 + 带出历史运行记录。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-n<span class=\"token operator\">=</span>？ <span class=\"token comment\"># 显示最近创建的容器。？等于一，就是显示一条。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-q <span class=\"token comment\"># 只显示容器的编号</span></pre></td></tr></table></figure><p><strong>退出容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exit</span>   <span class=\"token comment\"># 直接容器停止并退出</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Ctrl + p + Q\t<span class=\"token comment\"># 容器不停止退出</span></pre></td></tr></table></figure><p><strong>删除容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">rm</span> 容器id\t\t<span class=\"token comment\"># 删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -f</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker <span class=\"token function\">rm</span> -f <span class=\"token variable\"><span class=\"token variable\">$(</span>docker <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span>\t<span class=\"token comment\"># 强制删除所有容器。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker <span class=\"token function\">ps</span> -a -q <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> docker <span class=\"token function\">rm</span>\t<span class=\"token comment\">#删除所有的容器。</span></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker start 容器id\t<span class=\"token comment\"># 启动容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker restart 容器id\t<span class=\"token comment\"># 重启容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker stop 容器id\t<span class=\"token comment\"># 停止当前正在运行的容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker <span class=\"token function\">kill</span> 容器id\t<span class=\"token comment\"># 停止当前正在运行的容器</span></pre></td></tr></table></figure><h2 id=\"常用的其他命令\"><a class=\"anchor\" href=\"#常用的其他命令\">#</a> 常用的其他命令</h2>\n<p><strong>后台启动容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 命令 docker run -d + 镜像名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -d centos</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 问题 docker ps，发现了 centos 停止了。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就自动停止</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># nginx，容器启动后，发现自己没有提供服务，就立刻停止，就是没有程序了。</span></pre></td></tr></table></figure><p><strong>查看日志</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker logs -f -t --tail <span class=\"token number\">10</span>\t+ 容器id，没有日志</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 自己编写一段 shell 脚本</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run -d centos /bin/sh -c \"while true;do echo yanan;sleep 1;done\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS     NAMES</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>632215a985f8   centos    <span class=\"token string\">\"/bin/sh -c 'while t…\"</span>   <span class=\"token number\">2</span> minutes ago       Up <span class=\"token number\">2</span> minutes                 fervent_sutherland</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>9625ad394ea0   centos    <span class=\"token string\">\"/bin/bash\"</span>              About an hour ago   Up About an hour             silly_perlman</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 这里的 id 为 632215a985f8 这个的就是刚才上面我们自己编写的 shell 脚本。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 显示日志</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-tf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--tail number  <span class=\"token comment\"># number 是要显示的条数。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker logs -tf --tail 10 632215a985f8</span></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 命令 docker top + 容器 id</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker top 632215a985f8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">UID</span>                 PID                 <span class=\"token environment constant\">PPID</span>                C                   STIME               TTY                 TIME                CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root                <span class=\"token number\">130102</span>              <span class=\"token number\">130082</span>              <span class=\"token number\">0</span>                   <span class=\"token number\">10</span>:46               ?                   00:00:00            /bin/sh -c <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> yanan<span class=\"token punctuation\">;</span><span class=\"token function\">sleep</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>root                <span class=\"token number\">130980</span>              <span class=\"token number\">130102</span>              <span class=\"token number\">0</span>                   <span class=\"token number\">10</span>:56               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang<span class=\"token operator\">=</span>sleep /usr/bin/sleep <span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker inspect + 容器id</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 例子如下：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker inspect 632215a985f8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"Id\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"Created\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2021-06-18T02:46:48.189412678Z\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"Path\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/bin/sh\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"Args\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"-c\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"while true;do echo yanan;sleep 1;done\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"State\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token string\">\"Status\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"running\"</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">\"Running\"</span><span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token string\">\"Paused\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">\"Restarting\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token string\">\"OOMKilled\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">\"Dead\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token string\">\"Pid\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">130102</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token string\">\"ExitCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token string\">\"Error\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token string\">\"StartedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2021-06-18T02:46:48.519148447Z\"</span>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token string\">\"FinishedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0001-01-01T00:00:00Z\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token string\">\"Image\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55\"</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"ResolvConfPath\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/containers/632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd/resolv.conf\"</span>,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token string\">\"HostnamePath\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/containers/632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd/hostname\"</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">\"HostsPath\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/containers/632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd/hosts\"</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token string\">\"LogPath\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/containers/632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd/632215a985f86604fb0140c1cccfb91d218abaa0b97e143cb70868148beab7fd-json.log\"</span>,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/fervent_sutherland\"</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token string\">\"RestartCount\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"overlay2\"</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"Platform\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"linux\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"MountLabel\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token string\">\"ProcessLabel\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token string\">\"AppArmorProfile\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token string\">\"ExecIDs\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token string\">\"HostConfig\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token string\">\"Binds\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token string\">\"ContainerIDFile\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token string\">\"LogConfig\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"Type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"json-file\"</span>,</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\"Config\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token string\">\"NetworkMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"default\"</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token string\">\"PortBindings\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token string\">\"RestartPolicy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"no\"</span>,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"MaximumRetryCount\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token string\">\"AutoRemove\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token string\">\"VolumeDriver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token string\">\"VolumesFrom\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token string\">\"CapAdd\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token string\">\"CapDrop\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token string\">\"CgroupnsMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"host\"</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token string\">\"Dns\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token string\">\"DnsOptions\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token string\">\"DnsSearch\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token string\">\"ExtraHosts\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token string\">\"GroupAdd\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token string\">\"IpcMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"private\"</span>,</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token string\">\"Cgroup\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token string\">\"Links\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token string\">\"OomScoreAdj\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token string\">\"PidMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token string\">\"Privileged\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token string\">\"PublishAllPorts\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token string\">\"ReadonlyRootfs\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token string\">\"SecurityOpt\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token string\">\"UTSMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token string\">\"UsernsMode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token string\">\"ShmSize\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">67108864</span>,</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token string\">\"Runtime\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"runc\"</span>,</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token string\">\"ConsoleSize\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token string\">\"Isolation\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token string\">\"CpuShares\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token string\">\"Memory\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token string\">\"NanoCpus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token string\">\"CgroupParent\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token string\">\"BlkioWeight\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token string\">\"BlkioWeightDevice\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token string\">\"BlkioDeviceReadBps\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token string\">\"BlkioDeviceWriteBps\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token string\">\"BlkioDeviceReadIOps\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token string\">\"BlkioDeviceWriteIOps\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token string\">\"CpuPeriod\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token string\">\"CpuQuota\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token string\">\"CpuRealtimePeriod\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token string\">\"CpuRealtimeRuntime\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token string\">\"CpusetCpus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token string\">\"CpusetMems\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token string\">\"Devices\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token string\">\"DeviceCgroupRules\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token string\">\"DeviceRequests\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token string\">\"KernelMemory\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token string\">\"KernelMemoryTCP\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token string\">\"MemoryReservation\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token string\">\"MemorySwap\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token string\">\"MemorySwappiness\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token string\">\"OomKillDisable\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token string\">\"PidsLimit\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token string\">\"Ulimits\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token string\">\"CpuCount\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token string\">\"CpuPercent\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token string\">\"IOMaximumIOps\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token string\">\"IOMaximumBandwidth\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token string\">\"MaskedPaths\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token string\">\"/proc/asound\"</span>,</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token string\">\"/proc/acpi\"</span>,</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token string\">\"/proc/kcore\"</span>,</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token string\">\"/proc/keys\"</span>,</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token string\">\"/proc/latency_stats\"</span>,</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token string\">\"/proc/timer_list\"</span>,</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token string\">\"/proc/timer_stats\"</span>,</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                <span class=\"token string\">\"/proc/sched_debug\"</span>,</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                <span class=\"token string\">\"/proc/scsi\"</span>,</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token string\">\"/sys/firmware\"</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token string\">\"ReadonlyPaths\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token string\">\"/proc/bus\"</span>,</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token string\">\"/proc/fs\"</span>,</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token string\">\"/proc/irq\"</span>,</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token string\">\"/proc/sys\"</span>,</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token string\">\"/proc/sysrq-trigger\"</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token string\">\"GraphDriver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token string\">\"Data\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token string\">\"LowerDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/de124c2876dc50d329be43cecdffa6bb6687e99e5fa8623c0ea2c618387c821a-init/diff:/var/lib/docker/overlay2/99d95899194b53d6ee714912494fc15576f0712ab2077192fe7061696325fe9d/diff\"</span>,</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                <span class=\"token string\">\"MergedDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/de124c2876dc50d329be43cecdffa6bb6687e99e5fa8623c0ea2c618387c821a/merged\"</span>,</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                <span class=\"token string\">\"UpperDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/de124c2876dc50d329be43cecdffa6bb6687e99e5fa8623c0ea2c618387c821a/diff\"</span>,</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                <span class=\"token string\">\"WorkDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/overlay2/de124c2876dc50d329be43cecdffa6bb6687e99e5fa8623c0ea2c618387c821a/work\"</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"overlay2\"</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token string\">\"Mounts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token string\">\"Config\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token string\">\"Hostname\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"632215a985f8\"</span>,</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token string\">\"Domainname\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token string\">\"User\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token string\">\"AttachStdin\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token string\">\"AttachStdout\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token string\">\"AttachStderr\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token string\">\"Tty\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token string\">\"OpenStdin\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token string\">\"StdinOnce\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token string\">\"Env\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token string\">\"Cmd\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token string\">\"/bin/sh\"</span>,</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token string\">\"-c\"</span>,</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                <span class=\"token string\">\"while true;do echo yanan;sleep 1;done\"</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token string\">\"Image\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"centos\"</span>,</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token string\">\"Volumes\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token string\">\"WorkingDir\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token string\">\"Entrypoint\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token string\">\"OnBuild\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                <span class=\"token string\">\"org.label-schema.build-date\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"20201204\"</span>,</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token string\">\"org.label-schema.license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"GPLv2\"</span>,</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                <span class=\"token string\">\"org.label-schema.name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CentOS Base Image\"</span>,</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token string\">\"org.label-schema.schema-version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0\"</span>,</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                <span class=\"token string\">\"org.label-schema.vendor\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CentOS\"</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token string\">\"NetworkSettings\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token string\">\"Bridge\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token string\">\"SandboxID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"b74dbfc943b00745c34506e0c5e60da5115ef4cf1939be0f00a436044db9d0dc\"</span>,</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token string\">\"HairpinMode\"</span><span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token string\">\"LinkLocalIPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token string\">\"LinkLocalIPv6PrefixLen\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token string\">\"Ports\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token string\">\"SandboxKey\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/run/docker/netns/b74dbfc943b0\"</span>,</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token string\">\"SecondaryIPAddresses\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token string\">\"SecondaryIPv6Addresses\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5a814cb0d1f0e15c7cdd6b4c12d0ad0694e6c024b8b21af3ed8efecdd51bd312\"</span>,</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token string\">\"Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.17.0.1\"</span>,</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token string\">\"GlobalIPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            <span class=\"token string\">\"GlobalIPv6PrefixLen\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token string\">\"IPAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.17.0.3\"</span>,</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            <span class=\"token string\">\"IPPrefixLen\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">16</span>,</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            <span class=\"token string\">\"IPv6Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:ac:11:00:03\"</span>,</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>            <span class=\"token string\">\"Networks\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                <span class=\"token string\">\"bridge\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>                    <span class=\"token string\">\"IPAMConfig\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>                    <span class=\"token string\">\"Links\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>                    <span class=\"token string\">\"Aliases\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>                    <span class=\"token string\">\"NetworkID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"cbf06a0493948171fe26ac9eb31e2584bac17d1aa55715470a3f478591125a77\"</span>,</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                    <span class=\"token string\">\"EndpointID\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5a814cb0d1f0e15c7cdd6b4c12d0ad0694e6c024b8b21af3ed8efecdd51bd312\"</span>,</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>                    <span class=\"token string\">\"Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.17.0.1\"</span>,</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>                    <span class=\"token string\">\"IPAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"172.17.0.3\"</span>,</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                    <span class=\"token string\">\"IPPrefixLen\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">16</span>,</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>                    <span class=\"token string\">\"IPv6Gateway\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>                    <span class=\"token string\">\"GlobalIPv6Address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>                    <span class=\"token string\">\"GlobalIPv6PrefixLen\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                    <span class=\"token string\">\"MacAddress\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"02:42:ac:11:00:03\"</span>,</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                    <span class=\"token string\">\"DriverOpts\"</span><span class=\"token builtin class-name\">:</span> null</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 命令</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it + 容器id /bin/bash</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 测试例子：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS     NAMES</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>632215a985f8   centos    <span class=\"token string\">\"/bin/sh -c 'while t…\"</span>   <span class=\"token number\">25</span> minutes ago      Up <span class=\"token number\">25</span> minutes                fervent_sutherland</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>9625ad394ea0   centos    <span class=\"token string\">\"/bin/bash\"</span>              About an hour ago   Up About an hour             silly_perlman</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it 9625ad394ea0 /bin/bash</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@9625ad394ea0 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ps -ef</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token environment constant\">UID</span>          PID    <span class=\"token environment constant\">PPID</span>  C STIME TTY          TIME CMD</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>root           <span class=\"token number\">1</span>       <span class=\"token number\">0</span>  <span class=\"token number\">0</span> 01:43 pts/0    00:00:00 /bin/bash</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>root          <span class=\"token number\">16</span>       <span class=\"token number\">0</span>  <span class=\"token number\">0</span> 03:12 pts/1    00:00:00 /bin/bash</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>root          <span class=\"token number\">30</span>      <span class=\"token number\">16</span>  <span class=\"token number\">0</span> 03:13 pts/1    00:00:00 <span class=\"token function\">ps</span> -ef</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 方式二</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>docker attach + 容器id</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># docker exec\t\t# 进入容器后开启一个新的终端，可以在里面操作（刚创建的容器）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># docker attach\t\t# 进入容器正在执行的终端，不会启动行的进程（正在运行的容器）</span></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker <span class=\"token function\">cp</span> + 容器id：容器内路径\t目的的主机路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 查看当前主机的进程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan home<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dd3b2ccc9c13   centos    <span class=\"token string\">\"/bin/bash\"</span>   <span class=\"token number\">3</span> minutes ago   Up <span class=\"token number\">3</span> minutes             xenodochial_taussig</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 进入 docker 容器内部在容器内建一个文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan home<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker attach dd3b2ccc9c13</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@dd3b2ccc9c13 home<span class=\"token punctuation\">]</span><span class=\"token comment\"># touch test.java</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@dd3b2ccc9c13 home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>test.java</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>root@dd3b2ccc9c13 home<span class=\"token punctuation\">]</span><span class=\"token comment\"># exit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 将文件拷贝到我们的主机上。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan home<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker cp dd3b2ccc9c13:/home/test.java /home</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># docker cp 容器 id: + 需要拷贝的文件路径 + 需要拷贝的主机目录（这里是 /home）。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>test.java  yanan.java</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现，自动同步，主机上的 /home  和  容器上的 /home 、自动备份。</span></pre></td></tr></table></figure><h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h2>\n<blockquote>\n<p>Docker 安装 Nginx</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 搜索镜像 search 建议去 docker 官网搜索，可以看到帮助文档</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 下载镜像\tpull</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 运行测试 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker pull nginx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker run -d --name nginx01 -p <span class=\"token number\">3344</span>:80 nginx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 注释：使用 docker 运行下载的 docker --name，是给镜像命名，默认的话， 不用写。这里给他重命为 nginx01。-p，暴露一个端口号，暴露一个 3344 的端口号。后面加上 nginx。启动 nginx</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># -d 后台运行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># --name\t给容器命令</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># -p\t暴露端口，宿主机，容器内部端口。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan /<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>nginx        latest    d1a364dc548d   <span class=\"token number\">3</span> weeks ago    133MB\t<span class=\"token comment\"># 刚拉取下载的 nginx</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mysql        latest    c0cdc95609f1   <span class=\"token number\">5</span> weeks ago    556MB</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>centos       latest    300e315adb2f   <span class=\"token number\">6</span> months ago   209MB</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 进入容器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it nginx01 /bin/bash</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>root@10e221d799fd:/<span class=\"token comment\"># whereis nginx</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>root@10e221d799fd:/<span class=\"token comment\"># cd /etc/nginx/</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>root@10e221d799fd:/etc/nginx<span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>conf.d\tfastcgi_params\tmime.types  modules  nginx.conf  scgi_params  uwsgi_params</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 这里就会有正常的 nginx 的配置.conf 配置文件。</span></pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C2.png\" alt=\"image-20210621132859097\"></p>\n<p>思考问题：我们每次改动 nginx 配置文件，都需要进入容器内部？十分麻烦，我要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？-v 数据卷！</p>\n<blockquote>\n<p>作业：使用 docker 装一个 tomcat。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 官方使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker run -it --rm tomcat:9.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 我们之前的启动都是后台，停止了容器之后，容器还可以查到。docker run -it --rm 。这个是用来测试，用完就删除。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 下载启动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>docker pull tomcat</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 启动运行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>docker run -d -p <span class=\"token number\">3355</span>:8080 --name tomcat01 tomcat</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 使用 docker 运行 tomcat，在后台环境下，暴露一个 3355:8080 端口 运行，重命名为 tomcat01</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#进入容器 docer exec -it + 容器名 /bin/bash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 问题：测试访问没有问题，但是显示的是 404 页面。是因为 docker 全部简化了。这样的话 webapps 里面没有东西。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 解决：我们复制 webapps.dist 里面的内容到 webapps 中，就可以正常显示 tomcat 页面了。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token function\">cp</span> -r webapps.dist/* webapps <span class=\"token comment\"># 赋值 webapps.dist/* 之下的所有目录，到 webapps 中。</span></pre></td></tr></table></figure><p>思考问题：我们以后部署项目，如果每次都要进入容器是不是十分麻烦？我要是可以在容器外部提供一个映射路径，webapps，我们在外部放置项目，就自动同步到内部就好了。</p>\n<blockquote>\n<p>作业：部署 es + kibana</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># es 暴露的端口很多！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># es 十分的耗内存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># es 的数据一般需要防止到安全目录！挂载。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 下载启动 elasticsearch</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 加上 es 的配置。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>docker run -d --name elasticsearch02 -p <span class=\"token number\">9200</span>:9200 -p <span class=\"token number\">9300</span>:9300 -e <span class=\"token string\">\"discovery.type=single-node\"</span> -e <span class=\"token assign-left variable\">ES_JAVA_OPTS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-Xms64m -Xmx512m\"</span> elasticsearch:7.6.2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># -e ES_JAVA_OPTS=\"-Xms64m -Xmx512m\" -e 限制一些基本运行的函数 ES_java 的环境，最小 64m。最大运行给他 512m</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 测试一下 es 是否成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl localhost:9200</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"901fb49e18c1\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token string\">\"cluster_name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"docker-cluster\"</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token string\">\"cluster_uuid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"lP5Q8aoyS2COdm9WoEbqrg\"</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"number\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"7.6.2\"</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"build_flavor\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"default\"</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">\"build_type\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"docker\"</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token string\">\"build_hash\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\"</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token string\">\"build_date\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2020-03-26T06:34:37.794943Z\"</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token string\">\"build_snapshot\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token string\">\"lucene_version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"8.4.0\"</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"minimum_wire_compatibility_version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"6.8.0\"</span>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token string\">\"minimum_index_compatibility_version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"6.0.0-beta1\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token string\">\"tagline\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"You Know, for Search\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>查看 cpu 使用率</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker stats</pre></td></tr></table></figure></blockquote>\n<h2 id=\"可视化\"><a class=\"anchor\" href=\"#可视化\">#</a> 可视化</h2>\n<ul>\n<li>\n<p>portainer（先用这个）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">8088</span>:9000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--restart<span class=\"token operator\">=</span>always -v/var/run/docker.sock:/var/run/docker.sock --privileged<span class=\"token operator\">=</span>true portainer/portainer</pre></td></tr></table></figure></li>\n<li>\n<p>Eancher（CI、CD 再用）</p>\n</li>\n</ul>\n<p><strong>什么是 Portainer？</strong></p>\n<p>Docker 图形化界面管理工具！提供一个后台面板供我们操作！</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">8088</span>:9000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--restart<span class=\"token operator\">=</span>always -v/var/run/docker.sock:/var/run/docker.sock --privileged<span class=\"token operator\">=</span>true portainer/portainer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这里需要去开通安全组的外网端口 8088</span></pre></td></tr></table></figure><p>访问测试。自己的 ip 加端口 8088</p>\n<p>通过他来访问了：</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C3.png\" alt=\"image-20210623100939079\"></p>\n<p>设置密码进入，我设置的为 <code>admin123</code></p>\n<p>可视化面板我们平时不怎么使用，自己测试玩玩就可以了。</p>\n<h1 id=\"docker镜像讲解\"><a class=\"anchor\" href=\"#docker镜像讲解\">#</a> Docker 镜像讲解</h1>\n<h2 id=\"镜像是什么\"><a class=\"anchor\" href=\"#镜像是什么\">#</a> 镜像是什么？</h2>\n<p>18 集、</p>\n<h2 id=\"docker镜像加载原理\"><a class=\"anchor\" href=\"#docker镜像加载原理\">#</a> Docker 镜像加载原理</h2>\n<p>19 集、</p>\n<h2 id=\"分层理解\"><a class=\"anchor\" href=\"#分层理解\">#</a> 分层理解</h2>\n<p>19 集、</p>\n<h2 id=\"commit镜像\"><a class=\"anchor\" href=\"#commit镜像\">#</a> commit 镜像</h2>\n<p>docker commit 提交容器成为一个新的副本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 命令和 git 原理类似</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker commit -m<span class=\"token operator\">=</span><span class=\"token string\">\"提交的描述信息\"</span> -a<span class=\"token operator\">=</span><span class=\"token string\">\"作者\"</span> 容器ID 目标镜像名:<span class=\"token punctuation\">[</span>Tag<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>实战测试：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、启动一个默认的 tomat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 2、发现这个默认的 tomcat 是没有 webapps 应用，镜像的原因，官方的镜像默认 webapps 下面是没有文件的！我们只好从 webapps.dist 文件中复制过去。这样就可以正常使用了。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 3、我自己拷贝进去了基本的文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 4、将我们操作过的容器通过 commit 提交为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像</span></pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C4.png\" alt=\"image-20210623132839144\"></p>\n<p>到了这里，才算是 docker 入门！</p>\n<h1 id=\"容器数据卷\"><a class=\"anchor\" href=\"#容器数据卷\">#</a> 容器数据卷</h1>\n<h2 id=\"什么是容器数据卷\"><a class=\"anchor\" href=\"#什么是容器数据卷\">#</a> 什么是容器数据卷</h2>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C5.png\" alt=\"image-20210623133945173\"></p>\n<p>总结一句话：容器的持久和同步操作！容器间也是可以数据共享的！</p>\n<h2 id=\"使用数据卷\"><a class=\"anchor\" href=\"#使用数据卷\">#</a> 使用数据卷</h2>\n<blockquote>\n<p>方式一：直接使用命令来挂载 -v</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -it -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -v 主机目录：容器内目录，做一个映射。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 测试：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker run -it -v /home/ceshi:/home centos /bin/bash</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-it <span class=\"token comment\"># 在里面去执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-v <span class=\"token comment\"># 挂载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/home/ceshi:/home <span class=\"token comment\"># /home/ceshi 是虚拟机上的测试目录。：跟容器里面的 /home 对应映射。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>centos <span class=\"token comment\"># 启动镜像</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 启动起来时候我们可以通过 docker inspect + 容器 ID  查看具体信息。</span></pre></td></tr></table></figure><p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C6.png\" alt></p>\n<p>测试文件的同步</p>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C7.png\" alt=\"image-20210623152819024\"></p>\n<p>再来测试：</p>\n<ol>\n<li>停止容器，不是删除，是停止，exit。退出，停止。</li>\n<li>宿主机上修改文件</li>\n<li>启动容器</li>\n<li>容器内的数据依旧同步的</li>\n</ol>\n<p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步。</p>\n<h2 id=\"实战安装mysql\"><a class=\"anchor\" href=\"#实战安装mysql\">#</a> 实战：安装 MySQL</h2>\n<p>思考：MySQL 的数据持久的问题</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 获取镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull mysql:5.7</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 运行容器，需要做数据挂载！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 安装启动 mysql，是需要配置密码的，这是需要注意的点。官网的是这样的。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:5.7</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 启动我们的 mysql</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>docker run -d -p <span class=\"token number\">3310</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> --name mysql01 mysql:5.7</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-d 后台运行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>-p <span class=\"token number\">3310</span>:3306\t端口映射</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>-v /home/mysql/conf:/etc/mysql/conf.d\t卷挂载，映射配置挂载</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>-v /home/mysql/data:/var/lib/mysql\t卷挂载，映射数据挂载</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>-e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span>\t环境配置，配置mysql的密码。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>--name mysql01 \t容器的名字。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mysql:5.7 <span class=\"token comment\"># 需要启动的名字加版本号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 启动成功以后，我们在本地使用 navcat 来测试一下， 记得在服务器配置 3310 端口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># navcat - 连接到服务的 3310 --- 3310 和容器内的 3306 映射，这个是我们就可以连接上了！</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 在本地创建一个数据库，查看我们的映射是否 ok！</span></pre></td></tr></table></figure><h2 id=\"具名挂载和匿名挂载\"><a class=\"anchor\" href=\"#具名挂载和匿名挂载\">#</a> 具名挂载和匿名挂载</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 匿名挂载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-v 容器内路径！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker run -d -P --name nginx01 -v /ect/nginx nginx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看所有的 volume</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan data<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker volume ls</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DRIVER    VOLUME NAME</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">local</span>     0b8665fdb3d8541564c963d0d8ac06f3fc2443a9de1e2e94a5182ff886f6b22f</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">local</span>     3d9a65b7398b9c809a02eff681a9ede7065225bf918c376ac91094ac92664f57</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">local</span>     6e24a2ff87e1f4840d33e7427ee6b59b88c45d314e973f290146e43f625a7934</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">local</span>     7c6011f63bb4cc96a3b725d17c8b363962748f703a7c4ce8827b9717dea9efda</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">local</span>     8ca7d1ef73b3eeee67f8af2da4b9b6c43f989bda4837c8bfdf38fb55c8a0ab2f</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">local</span>     9eee80503bf966349d4fefaa4b449942a81c252449fd0ad1471a30e43c20f454</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">local</span>     58cf2baf4712c05dafc2b0a48aa8e36e12bc1e7e38fe41c9ea9d8ef16f478a11</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 具名挂载</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 通过 - v 卷名：容器内路径</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 查看一下这个卷</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">local</span>     bda56e90dc819b3bc9ba87e4c8ada55c05ba83c646e5f440b67adf32ff6c3d1c</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin class-name\">local</span>     dca55220d001343ea5ff1696176b9c18ebe5526c88f98cbbec21dbaed9376086</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin class-name\">local</span>     fe707bc573dfcb8cf1bc19553de1f09725c72ed11f1901038381f72503f660dd</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token builtin class-name\">local</span>     juming-nginx</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">[</span>root@yanan data<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker volume inspect juming-nginx</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token string\">\"CreatedAt\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2021-06-24T13:16:54+08:00\"</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token string\">\"Driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"Labels\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token string\">\"Mountpoint\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"/var/lib/docker/volumes/juming-nginx/_data\"</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">\"Name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"juming-nginx\"</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token string\">\"Options\"</span><span class=\"token builtin class-name\">:</span> null,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string\">\"Scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"local\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>所有的 docker 容器内的卷，没有指定目录的情况下，都是在 <code>/var/lib/docker/volumes/xxx/data</code></p>\n<p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况都在使用的 <code>具名挂载</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-v 容器内路径\t<span class=\"token comment\"># 匿名挂载</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-v 卷名：容器内路径\t\t<span class=\"token comment\"># 具名挂载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-v /宿主机路径:容器内路径\t\t<span class=\"token comment\"># 指定路径挂载</span></pre></td></tr></table></figure><p>拓展：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 通过 - v 容器内路径：ro rw 改变读写权限。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ro <span class=\"token builtin class-name\">readonly</span> <span class=\"token comment\"># 只读</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rw readwrite <span class=\"token comment\"># 可读可写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ro 只要看到 ro 就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></pre></td></tr></table></figure><h2 id=\"初识dockerfile\"><a class=\"anchor\" href=\"#初识dockerfile\">#</a> 初识 Dockerfile</h2>\n<p>Dockerfile 就是用来构建 docker 镜像的构建文件！命令脚本！体验一下！</p>\n<p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是一层</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建一个 dockerfile 文件，名字可以随机 建议 dockerfile</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 文件中的内容 指令（大写）参数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FROM centos</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOLUME <span class=\"token punctuation\">[</span><span class=\"token string\">\"volume01\"</span>,<span class=\"token string\">\"volume02\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CMD <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"---end----\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>CMD /bin/bash</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 这里的每个命令，就是镜像的一层！</span></pre></td></tr></table></figure><blockquote>\n<p>方式二：</p>\n</blockquote>\n<p><img data-src=\"E:%5CLklyx.github.io%5Csource_posts%5CGrowth-Diary%5C%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%5CDocker%5Cimage%5C8.png\" alt=\"image-20210625145050645\"></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动自己写的容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>run start + 容器id</pre></td></tr></table></figure><h2 id=\"dockerfile体系结构\"><a class=\"anchor\" href=\"#dockerfile体系结构\">#</a> Dockerfile 体系结构</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM\t<span class=\"token comment\"># 基础镜像，当前新镜像是基于那个镜像的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MAINTAINER\t<span class=\"token comment\"># 镜像维护者的姓名和邮箱地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>RUN\t\t<span class=\"token comment\"># 容器构建时需要运行的命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EXPOSE \t <span class=\"token comment\"># 当前容器对外暴露的端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WORKDIR \t<span class=\"token comment\"># 指定在创建容器后，终端默认登录的工作目录。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ENV \t <span class=\"token comment\"># 用来在构建镜像过程中设置环境变量的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ADD \t<span class=\"token comment\"># 将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 压缩包</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>COPY \t<span class=\"token comment\"># 类似 ADD，拷贝文件到镜像目录中。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>VOLUME \t<span class=\"token comment\"># 容器数据卷，用于数据保存和持久化工作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CMD \t<span class=\"token comment\">#  指定一个容器启动时要运行的命令，Dockerfile 可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ENTRYPOINT <span class=\"token comment\"># 指定一个容器启动时要运行的命令，</span></pre></td></tr></table></figure><h1 id=\"自定义镜像\"><a class=\"anchor\" href=\"#自定义镜像\">#</a> 自定义镜像</h1>\n<h2 id=\"测试创建镜像\"><a class=\"anchor\" href=\"#测试创建镜像\">#</a> 测试 — 创建镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ENV MYPATH /usr/local <span class=\"token comment\"># 配置环境变量，就是安装的位置。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WORKDIR <span class=\"token variable\">$MYPATH</span> <span class=\"token comment\"># 工资目录也就是环境变量的目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>RUN yum -y <span class=\"token function\">install</span> <span class=\"token function\">vim</span> <span class=\"token comment\"># 安装下载可以使用 vim 命令</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>RUN yum -y <span class=\"token function\">install</span> net-tools <span class=\"token comment\"># 安装下载可以使用 ifconfig 命令</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>EXPOSE <span class=\"token number\">80</span> <span class=\"token comment\"># 对外暴露的是 80 端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CMD <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$MYPATH</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CMD ECHO “sucdess-------------------ok”</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>CMD /bin/bash</pre></td></tr></table></figure><p>自定义一个 centos 镜像，让它可以使用 vim、ifconfig、等命令，且让镜像一进来的工作目录为 <code>/usr/local</code> ，对外暴露的端口为 80。</p>\n<p>创建好以后 **wq!** 保存，然后打包生成镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -f /home/Test/DockerFile -t mycentos:3.0 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>== 注意：== 后面的点不能取消。打包好以后，就可以使用 docker images 查看我们的镜像了。</p>\n<h2 id=\"自定义镜像tomcat85\"><a class=\"anchor\" href=\"#自定义镜像tomcat85\">#</a> 自定义镜像 Tomcat8.5</h2>\n<ol>\n<li>\n<p>将 jdk 和 tomcat 安装包的压缩包拷贝进你需要放置的目录中</p>\n</li>\n<li>\n<p>编写需要的配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MAINTAINER yananduobu@qq.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 把宿主机当前上下文的 c.txt 文件拷贝到容器 /usr/local/ 路径下，并且改名字为，yananduobu.txt</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>COPY c.txt /usr/local/yananduobu.txt</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 把 java 与 tomcat 添加到容器中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ADD jdk-8u291-linux-x64.tar.gz /usr/local/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ADD apache-tomcat-8.5.30.tar.gz /usr/local/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 安装编辑器，让 centos 可以使用命令 vim</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>RUN yum -y <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 设置工作时的 WORKDIR 路径，登录落脚点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ENV MYPATH /usr/local/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>WORKDIR <span class=\"token variable\">$MYPATH</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 配置 java 与 tomcat 的环境变量，JAVA_HOME 一般配到 jkd 目录就可以了。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ENV JAVA_HOME /usr/local/jdk1.8.0_291</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ENV CLASSPATH <span class=\"token variable\">$JAVA_HOME</span>/usr/local/jdk1.8.0_291/lib/dt.jar:<span class=\"token variable\">$JAVA_HOME</span>/usr/local/jdk1.8.0_291/lib/tools.jar</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.30</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ENV CATALINA_BASE /usr/local/apache-tomcat-8.5.30</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ENV <span class=\"token environment constant\">PATH</span> <span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token variable\">$CATALINA_HOME</span>/lib:<span class=\"token variable\">$CATALINA_HOME</span>/bin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 容器运行时监听的端口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>EXPOSE <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 启动时运行 tomcat</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># ENTRYPOINT [“/usr/local/apache-tomcat-8.5.30/bin/startup.sh”]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># CMD [\"/usr/local/apache-tomcat-8.5.30/bin/catalina.sh\",\"run\"]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>CMD /usr/local/apache-tomcat-8.5.30/bin/startup.sh <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">tail</span> -F /usr/local/apache-tomcat-8.5.30/logs/catalina.out</pre></td></tr></table></figure></li>\n<li>\n<p>打包构建镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker build -t mytomcat8.5 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 这里没有加 -f ，是因为，不需要指定打包的路径，他会自动去找一个叫 Dockerfile 的文件。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-t <span class=\"token comment\"># 后面加的是你的镜像名字。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 后面的点，不能取消。</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">9080</span>:8080 --name tomcat8.5 -v /home/Test/tomcat9/test:/usr/local/apache-tomcat-8.5.30/webapps/test -v /home/Test/tomcat9/tomcat-logs/:/usr/local//apache-tomcat-8.5.30/logs --privileged<span class=\"token operator\">=</span>true mytomcat8.5</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-d <span class=\"token comment\"># 在后台运行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-p <span class=\"token comment\"># 对外暴露的端口为 9080</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--name <span class=\"token comment\"># 编辑容器的名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--privileged<span class=\"token operator\">=</span>true <span class=\"token comment\"># 有时候运行保存，就加上这一句。</span></pre></td></tr></table></figure></li>\n<li>\n<p>docker 配置数据库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拉取数据库，选择版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull mysql:5.7</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 运行配置。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker run -d -p <span class=\"token number\">3310</span>:3306 -v /home/Test/mysql/conf:/etc/mysql/conf.d -v /home/Test/mysql/data:/var/lib/mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> --name mysql mysql:5.7</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/React/React/",
            "title": "React",
            "date_published": "2021-04-28T16:00:00.000Z",
            "content_html": "<h1 id=\"什么是react\"><a class=\"anchor\" href=\"#什么是react\">#</a> 什么是 React？</h1>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "React",
                "React"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8F%92%E4%BB%B6/%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%8F%92%E4%BB%B6/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8F%92%E4%BB%B6/%E5%89%8D%E7%AB%AF%E5%B0%8F%E6%8F%92%E4%BB%B6/",
            "title": "开发中实用的前端插件",
            "date_published": "2021-04-28T16:00:00.000Z",
            "content_html": "<h2 id=\"1-实现数字慢慢的增加动画数字滚动计时\"><a class=\"anchor\" href=\"#1-实现数字慢慢的增加动画数字滚动计时\">#</a> 1、实现数字慢慢的增加动画（数字滚动计时）</h2>\n<p>​\t运用 vue 插件  <code>vue-count-to</code>  实现。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "前端插件",
                "插件"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/Blog/Git%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/Blog/Git%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/",
            "title": "Git常用命令",
            "date_published": "2021-04-11T16:00:00.000Z",
            "content_html": "<h1 id=\"git使用\"><a class=\"anchor\" href=\"#git使用\">#</a> Git 使用</h1>\n<p>git bash 命令窗口写命令：</p>\n<ol>\n<li>\n<p>克隆远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git cloen <span class=\"token comment\">// 加仓库的地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>本地仓库代码推送到远程仓库，需要先关联远程仓库：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote add origin <span class=\"token comment\">// + 仓库地址</span></pre></td></tr></table></figure></li>\n<li>\n<p>每一次提交添加：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git add <span class=\"token punctuation\">.</span> <span class=\"token comment\">// 提交所有，后面的点。代表所有本次新加的</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加提交的说明，注释 / 说明。就是本次提交修改的类容的缩写，比如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"修改首页\"</span> <span class=\"token comment\">// 在 git 上显示的就是修改首页。英文的双引号可以省略。</span></pre></td></tr></table></figure></li>\n<li>\n<p>提交。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token comment\">// 提交到默认分支、或你现在切换的分支。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push origin master <span class=\"token comment\">// 提交到 master 分支。加上 origin 就是指定提交的分支。</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果是新项目刚关联远程仓库那就先强推一次代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin master <span class=\"token operator\">-</span>f <span class=\"token comment\">//master 是分支名称</span></pre></td></tr></table></figure></li>\n<li>\n<p>查看当前分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git branch</pre></td></tr></table></figure></li>\n<li>\n<p>查看仓库状态：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git status</pre></td></tr></table></figure></li>\n<li>\n<p>切换分支：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git checkout <span class=\"token comment\">// + 需要切换的分支名</span></pre></td></tr></table></figure></li>\n<li>\n<p>新建分支并且切换到新的分支（把当前分支里面的东西都合并到你刚新建的分支里面）</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git checkout <span class=\"token operator\">-</span>b Test <span class=\"token comment\">// Test 为新分支</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>合并分支：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git merge  <span class=\"token comment\">// + 分支名。（在需要合并的分支上敲。在没写好的上面，合并写好的）</span></pre></td></tr></table></figure><h1 id=\"git返回之前版本\"><a class=\"anchor\" href=\"#git返回之前版本\">#</a> Git 返回之前版本</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token punctuation\">&#123;</span>hash<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>版本回退。</p>\n<h1 id=\"git报错openssl-ssl_read-connection-was-reset-errno-10054\"><a class=\"anchor\" href=\"#git报错openssl-ssl_read-connection-was-reset-errno-10054\">#</a> Git 报错：OpenSSL SSL_read: Connection was reset, errno 10054</h1>\n<p>有时候会在克隆，拉取项目，推送项目时报这个错，这是因为服务器的 SSl 证书没有经过第三方机构的签署，所以报错。解决办法如下：</p>\n<figure class=\"highlight apl\"><figcaption data-lang=\"APL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token function\">-</span><span class=\"token function\">-</span>global http<span class=\"token dyadic-operator operator\">.</span>sslVerify \"false\"</pre></td></tr></table></figure><h1 id=\"git常见的问题解决方法\"><a class=\"anchor\" href=\"#git常见的问题解决方法\">#</a> Git 常见的问题解决方法</h1>\n<p>问题<br>\n (1) 更新代码后显示： <strong> <code>unable to unlink old ‘xxx/xxx/xx’ : invalid argument</code> </strong><br>\n 问题原因：<br>\n要提交或更新的文件被系统线程占用<br>\n解决方法：<br>\n把相关服务暂停，重新 pull 代码<br>\n (2) 更新代码后显示： <strong> <code>the following untracked working tree files would be overwritten by checkout</code> </strong><br>\n 问题原因：<br>\n本地代码仓库目录下有 untracked 文件<br>\n解决方法：<br>\n如果没有需要上库的代码，直接执行 git clean -d -fx 删除 untracked 文件<br>\n (3) 更新代码后显示：<br>\n<strong> <code>your local changes to the following files would be overwritten by merge…</code> </strong><br>\n<strong> <code>please move or remove them before you merge</code> </strong></p>\n<p>问题原因：<br>\n新修改的代码之前未提交，可能被服务器上的代码覆盖<br>\n解决方法 1：<br>\n保留本地修改，然后 add/commit/push 到远程仓库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git stash\t\t\t\t\t<span class=\"token comment\">// 暂存本地修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master\t\t<span class=\"token comment\">// 拉取服务器最新代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git stash pop\t\t\t\t<span class=\"token comment\">// 暂存代码恢复</span></pre></td></tr></table></figure><p>解决方法 2：<br>\n放弃本地修改 - 直接回退到上一版本，再拉取服务器最新代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard\t\t\t<span class=\"token comment\">// 可加上 commit id</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git pull origin master</pre></td></tr></table></figure><p>(4) git pull 的时候认证失败：<br>\n<strong> <code>remote: invalid Login or password</code> </strong><br>\n<strong> <code>fatal: Authentication failed for 'https://…'</code> </strong></p>\n<p>问题原因：<br>\n账号密码失效或者是未登录<br>\n解决方法：<br>\nwindows 账户下，控制面板 -&gt; 用户帐户 -&gt;windows 凭据 -&gt; 修改 git 密码<br>\n (5) 版本回退 git reset --hard {hash} 后提示：<br>\n** <code>fatal: could not parse object &quot;hash id&quot;**</code></p>\n<p>问题原因：<br>\n切换到 master 分支后没有更新最新代码，git log 不包含要 reset 的节点<br>\n解决方法：<br>\n更新代码后 git log 找到对应节点 hash id 再 reset<br>\n (6) 切分支后提示文件有修改，撤销文件修改报错 / 对这个文件任何修改都报错<br>\n <code>**unlink of file ‘modifyFile.c’ failed. should I try again?(y/n)</code> **</p>\n<p>问题原因：<br>\n与问题 (1) 一样，有线程占用要修改的文件，比如代码查看器等<br>\n解决方法：<br>\n把相关服务停了，重新处理<br>\n (7) git push 后提示:<br>\n <code>**to https://.git**</code> <br>\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br>\n <code>**error: failed to push some refs to 'https://.git’**</code> <br>\n <code>**Updates were rejected because the remote contain work that you do not have locally.</code> **</p>\n<p>问题原因：<br>\n本地仓库不包含远程仓库修改<br>\n解决方法：<br>\n更新远程分支并重新 add/commit/push<br>\n (8) git push 后提示:<br>\n <code>**to https://.git**</code> <br>\n <code>**![rejected] localRepo-&gt;remoteRepo(fetch first)**</code> <br>\n <code>**error: failed to push some refs to 'https://.git’**</code> <br>\n <code>**Updates were rejected because the tip of your current branch is behind its remote couterpart. Integrate the remote changes bufore pushing again.</code> **</p>\n<p>问题原因：<br>\n本地仓库节点落后于远程仓库节点，当然这可能是自己主动回退的<br>\n解决方法：<br>\n方案 1：强推。覆盖远程分支，这样会使远程修改丢失，多人同一分支写作的时候不可取</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token operator\">-</span>f</pre></td></tr></table></figure><p>方案 2：重新拉取远程仓库 merge 再 push。结合具体代码修改情况做处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin <span class=\"token constant\">YOUR_BRANCH</span> <span class=\"token comment\">// 修改～</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH</span></pre></td></tr></table></figure><p>方案 3：直接推到新分支，原分支作废</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git push origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git branch <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>git push <span class=\"token operator\">-</span>u origin <span class=\"token constant\">YOUR_BRANCH_NEW</span></pre></td></tr></table></figure><p>(9) git pull 后提示<br>\n <code>**fatal: refuse to merge unrelated histories</code> **</p>\n<p>问题原因：<br>\n出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库，如果一开始用 git clone 拷贝到本地就不存在这个问题。本地 git init 后尝试与远程分支关联<br>\n解决方法：<br>\npull 命令后加 --allow-unrelated-histories 来解决，合并两个独立启动仓库的历史</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git pull origin master <span class=\"token operator\">--</span>allow<span class=\"token operator\">-</span>unrelated<span class=\"token operator\">-</span>histories</pre></td></tr></table></figure><p>(10) git checkout 后提示:<br>\n <code>**error: cannot stat ‘file…’: Filename too long</code> **</p>\n<p>问题原因：<br>\n如提示，文件名过长无法 checkout。git 可以创建 4096 长度的文件名，然而在 windows 最多是 260，因为 git 用了旧版本的 windows api，导致出现这种情况。<br>\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git config <span class=\"token operator\">--</span>global core<span class=\"token punctuation\">.</span>longpaths <span class=\"token boolean\">true</span> \t<span class=\"token comment\">// 去除文件名长度限制</span></pre></td></tr></table></figure><p>(11) git pull 后撤销:<br>\n 问题原因：<br>\n主干分支当前跑不过等原因<br>\n解决方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git reflog <span class=\"token constant\">YOUR_BRANCH</span>\t\t\t\t\t<span class=\"token comment\">// 查看当前分支操作记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git reset <span class=\"token operator\">--</span>hard <span class=\"token constant\">YOUR_BRANCH</span>@<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\t\t<span class=\"token comment\">// 回退到上一节点，拉取 master 之前</span></pre></td></tr></table></figure><p>(12) git checkout filename 后报错:<br>\nerror: pathspec did not match any files known to git</p>\n<p>问题原因：<br>\ngit checkout filename 回退未添加到缓存区的文件，但是对未 track 的文件不生效。git checkout 未 track 文件 git 以为是切分支<br>\n解决方法：<br>\n更新如果不需要该文件，直接删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rm filename</pre></td></tr></table></figure><h1 id=\"git查看当前的仓库地址\"><a class=\"anchor\" href=\"#git查看当前的仓库地址\">#</a> git 查看当前的仓库地址</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote <span class=\"token operator\">-</span>v</pre></td></tr></table></figure><h1 id=\"git查看当前仓库的基本信息\"><a class=\"anchor\" href=\"#git查看当前仓库的基本信息\">#</a> git 查看当前仓库的基本信息</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git remote show origin</pre></td></tr></table></figure><h1 id=\"使用git工具管理仓库\"><a class=\"anchor\" href=\"#使用git工具管理仓库\">#</a> 使用 Git 工具管理仓库</h1>\n<p>初学者适合用一些 Git 工具，这样就不用记那些很长的命令了。我是学了 git 以后再用工具的，当然会用工具也能节约很多开发时间、也很方便。下面我推荐一款 git 工具：</p>\n<p><code>SourceTree</code></p>\n<p>老规矩，直接官网下载，这样就有最新版了。好像安装使用的时候需要用邮箱注册一下，如果没有谷歌邮箱那就翻墙。</p>\n<h1 id=\"打不开github官网\"><a class=\"anchor\" href=\"#打不开github官网\">#</a> 打不开 GitHub 官网</h1>\n<ol>\n<li>\n<p>百度搜<em>索查询网址 dns</em>，或者直接打开<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLmNoaW5hei5jb20vZG5zLw==\">网址查询</span></p>\n</li>\n<li>\n<p>检测到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20=\"> https://github.com</span> 网址响应的 IP，将得到的 IP 添加到 hosts 文件中去。</p>\n</li>\n<li>\n<p>hosts 文件路径为：电脑磁盘中 <code>windows C:\\Windows\\System32\\drivers\\etc\\hosts</code>  右击，以管理员身份打开，打开方式为记事本。将上面查询到的 IP 地址输入到文件中保存即可。</p>\n</li>\n<li>\n<p>现在我加入的是：</p>\n<blockquote>\n<p>13.229.188.59 <a href=\"http://github.com\">github.com</a><br>\n140.82.112.4 <a href=\"http://github.com\">github.com</a></p>\n</blockquote>\n</li>\n<li>\n<p>如果还是不行，那就借阅这位博主的地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDczMzQxNzk/aXZrX3NhPTEwMjQzMjB1JUUzJTgwJTgy\">https://zhuanlan.zhihu.com/p/107334179?ivk_sa=1024320u。</span></p>\n</li>\n<li>\n<p><code>工具</code> ：</p>\n<p>这里我们可以借助一个工具来更新自己电脑里面的 host 文件。不用每次去找路径在以管理员身份打开，简化了很多繁琐的步骤 **:SwitchHosts**，直接去官网下载就可以了。也可以到我的百度网盘自己提取，下面附上我的百度网盘地址。</p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUotVXNwRmQ4MndFTk14akdFNFJQNGc=\">https://pan.baidu.com/s/1J-UspFd82wENMxjGE4RP4g</span><br>\n 提取码：arp0</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "历练ing",
                "Blog",
                "Git使用篇",
                "Git"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/Blog/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/Blog/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E5%B0%8F%E5%B7%A5%E5%85%B7/",
            "title": "开发小工具",
            "date_published": "2021-04-11T16:00:00.000Z",
            "content_html": "<h1 id=\"sourcetree\"><a class=\"anchor\" href=\"#sourcetree\">#</a> SourceTree</h1>\n<p>初学者适合用一些 Git 工具，这样就不用记那些很长的命令了。我是学了 git 以后再用工具的，当然会用工具也能节约很多开发时间、也很方便。下面我推荐一款 git 工具：sourceTree。这是一款 Git 仓库管理工具，可以使我方便提交 git 代码、推送代码、拉取代码、切换分支、合并分支等快捷操作，省时省心还简单。</p>\n<p>老规矩，直接官网下载，这样就有最新版了。好像安装使用的时候需要用邮箱注册一下，如果没有谷歌邮箱那就翻墙。</p>\n<h1 id=\"switchhosts\"><a class=\"anchor\" href=\"#switchhosts\">#</a> SwitchHosts</h1>\n<p>用于修改本机电脑的 hosts 文件，不用每次去找路径（windows C:\\Windows\\System32\\drivers\\etc\\hosts）再以管理员身份打开，然后再去修改 hosts 文件里面的 ip。直接去官网下载就可以了。也可以到我的百度网盘自己提取，下面附上我的百度网盘地址。</p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUotVXNwRmQ4MndFTk14akdFNFJQNGc=\">https://pan.baidu.com/s/1J-UspFd82wENMxjGE4RP4g</span><br>\n 提取码：arp0</p>\n</blockquote>\n<h1 id=\"beyond-compare\"><a class=\"anchor\" href=\"#beyond-compare\">#</a> Beyond Compare</h1>\n<p>Beyond Compare 是一款不可多得的专业级的文件夹和文件对比工具。使用他可以很方便的对比出两个文件夹或者文件的不同之处，并把相差的每一个字节用颜色加以表示，查看方便，并且支持多种规则对比。对程序编辑、修改者来说，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmV5b25kY29tcGFyZS5jYy8=\">Beyond Compare</span> 绝对是一款不可多得的工具。</p>\n<p>（1）比较的对象包罗万象</p>\n<p>参与比较的对象类型非常的丰富，如所有类型的文件、文件夹、压缩包、FTP 网站等，总之有了它，在浩瀚的资料面前不用再眉头紧皱，遥遥无期的感觉被它一扫而光。另外，谈到比较自然涉及到依据的标准是什么？可以通过 “会话” 菜单中的 “会话设置” 来设定 “常规” 和 “高级” 选项。也可以根据不同的 “会话” 来定义一系列的 “名称过滤”、“时间过滤”、“其他过滤”、“比较标准”、“其他标准” 等特定选项，并由 “会话管理” 命令来进行管理，为下次同类型的比较做一劳永逸的准备，多么的人性化啊！</p>\n<p>（2）建立比较任务的方式各有不同</p>\n<p>比较两个对象，可以通过打开程序后，建立所示的 “会话向导” 方式来分别指定它们；也可以通过右键功能菜单来达到。比如要比较两个文件夹的差异，可以右键点击文件夹 1，在上下功能菜单中选择 “选为左侧对比窗口” 命令，然后，再找到另一个文件夹 2，点击右键选择 “与文件夹 1 比较” 命令，于是便建立了比较任务。从随机性上看，觉得后者是比较灵活方便的，用前一种方式，显得比较罗嗦些，要启动程序，然后再启动向导。但是，从要对比较的对象进行操作的角度来讲，用 “会话向导” 则显得目的性强些。</p>\n<p>如果在你的电脑里面，右键菜单下没有 Beyond Compare 快捷选项，可参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iZXlvbmRjb21wYXJlLmNjL3dlbnRpL3lvdWppYW4tY2FpZGFuLmh0bWw=\">怎样将 Beyond Compare 添加到系统右键菜单</span>。</p>\n<p>（3）自定义查看方式</p>\n<p>对比结果显示出来后，我们可以根据自己要查询的内容，有选择的查看结果。通过点击 “视图” 菜单，可以对查看进行过滤，比如只看差异的部分或者匹配的部分等，方式很多，便于迅速的在结果中定位我们要找的东西。这里有一个技巧，就是要熟知配置中设定的 “差异文件”、“匹配文件”、“孤立文件”、“较新文件” 的图示标记，具体的看一下 “查看” 菜单中的 “图例” 命令便可了解。</p>\n<p><img data-src=\"../../../images/blog/%E5%BC%80%E5%8F%91%E5%B0%8F%E5%B7%A5%E5%85%B7/image-20220913143805886.png\" alt=\"软件截图\"><br>\n文件夹比较会话视图菜单示例</p>\n<p>（4）对比处理功能强大</p>\n<p>两个比较对象的差异点或者是匹配点显示出来了，接下来我们就可以通过 “操作” 菜单或者点击右键，通过快捷功能菜单来进行相应的处理，比如复制、删除、重命名等，还可与 “资源管理器” 链接以及 “打开方式” 联系，直接对比较对象进行操作，而不需要再回到文件夹中进行处理，多么的方便！</p>\n<p>【小提示】对于单个的对象，我们可以直接通过 “操作” 菜单上的命令进行处理；对于多个对象，比如 “左 / 右侧窗口中较新文件或孤立文件”，做统一的处理时，可以先结合着 “编辑” 菜单做相关过滤，然后再对筛选出的结果做统一的 “操作” 处理，从而大大地提高效率。</p>\n<p>Beyond Compare 软件做的很细致，平时在资源管理器中涉及到的文件、文件夹的操作在它上面都被成功体现，一方面它实现比较功能，另一方面与资源管理器紧密结合，在对比中完成对文件或文件夹的管理，体现了完美的兼容性和高效性！它的人性化的前期准备，比如差异显示、匹配显示、孤立文件的提取、较新文件的提取等方式，也是一大特色，为后期的文件及文件夹的处理奠定了基础。</p>\n<p>总之，软件非常的强大、实用。由于篇幅的原因，不可能面面俱到，在这里小编只是作一个大概的介绍，感兴趣的朋友不妨亲自去体验一下，现在就点击 “<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iZXlvbmRjb21wYXJlLmNjL3hpYXphaS5odG1s\">Beyond Compare 下载</span>”，感受以下不曾有过的 “比较” 乐趣！当然了。这么方便的工具，肯定是需要购买的了，一次购买，终身使用。然而贫穷限制了我的想象，作为白嫖博主的我当然也只能用破解版本了。</p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWRtUHRvU2RYVHRUT3Y2LUtxV0tKbHc=\">https://pan.baidu.com/s/1dmPtoSdXTtTOv6-KqWKJlw</span><br>\n 提取码：Yana</p>\n</blockquote>\n",
            "tags": [
                "历练ing",
                "Blog",
                "开发小工具",
                "开发工具"
            ]
        },
        {
            "id": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "url": "https://github.com/Lklyx/Lklyx.github.io/Growth-Diary/%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/Uni-App/Uni-App/",
            "title": "Uni-app",
            "date_published": "2021-04-05T16:00:00.000Z",
            "content_html": "<p><code>学习视屏21集开始</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUJKNDExVzdwWD9wPTIxJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVy\">学习视屏连接</span></p>\n<h1 id=\"数据缓存\"><a class=\"anchor\" href=\"#数据缓存\">#</a> 数据缓存</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的数据缓存。介绍了以下三个的用法</p>\n<ol>\n<li><strong>uni-setStorage</strong></li>\n<li><strong>uni-getStorage</strong></li>\n<li><strong>uni-removeStorage</strong></li>\n</ol>\n<p>uni-setStorage 和 uni-setStorageSync 的区别在于没有带 Sync 的是异步的方法，带 Sync 的是同步的方法，常用的是同步的方法。</p>\n<h1 id=\"上传图片\"><a class=\"anchor\" href=\"#上传图片\">#</a> 上传图片</h1>\n<p>本章主要讲到<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9zdG9yYWdlL3N0b3JhZ2U/aWQ9c2V0c3RvcmFnZQ==\"> uni-app 官方文档</span>中的 APi 之下的媒体之下的图片。主要注意看参数表格。默认最大是 9 张图</p>\n<p>文档中的<span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvL2FwaS9tZWRpYS9pbWFnZT9pZD1jaG9vc2VpbWFnZQ==\"> uni.chooseImage</span> 是从本地相册选择图片或者是使用相机拍照。</p>\n<p><strong>OBJECT 参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数名</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">必填</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">平台差异说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">count</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">最多可以选择的图片张数，默认 9</td>\n<td style=\"text-align:left\">见下方说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sizeType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">original 原图，compressed 压缩图，默认二者都有</td>\n<td style=\"text-align:left\">App、微信小程序、支付宝小程序、百度小程序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">extension</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">根据文件拓展名过滤，每一项都不能是空字符串。默认不过滤。</td>\n<td style=\"text-align:left\">H5(HBuilder X2.9.9+)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sourceType</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">album 从相册选图，camera 使用相机，默认二者都有。如需直接开相机或直接选相册，请只使用一个选项</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">success</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">成功则返回图片的本地文件路径列表 tempFilePaths</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fail</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用失败的回调函数</td>\n<td style=\"text-align:left\">小程序、App</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">complete</td>\n<td style=\"text-align:left\">Function</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">接口调用结束的回调函数（调用成功、失败都会执行）</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>success 返回参数说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tempFilePaths</td>\n<td style=\"text-align:left\">Array&lt;String&gt;</td>\n<td style=\"text-align:left\">图片的本地文件路径列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tempFiles</td>\n<td style=\"text-align:left\">Array&lt;Object&gt;、Array&lt;File&gt;</td>\n<td style=\"text-align:left\">图片的本地文件列表，每一项是一个 File 对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>File 对象结构如下</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">path</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">本地文件路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">本地文件大小，单位：B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">name</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">包含扩展名的文件名称，仅 H5 支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">文件类型，仅 H5 支持</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">chooseImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认 9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sizeType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'original'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'compressed'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可以指定是原图还是压缩图，默认二者都有</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sourceType<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'album'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 从相册选择</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>tempFilePaths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出上传图片的路径。路径为一个数组，这是我们可以在 data 中声明一个数组，将上传的图片路径赋值（这里使用箭头函数，要不然 this 指向会出错）到这个数组中，再渲染出来，就可以查看到上传的图片了。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"23条件注释实现跨端兼容\"><a class=\"anchor\" href=\"#23条件注释实现跨端兼容\">#</a> 23. 条件注释实现跨端兼容</h1>\n<p>使用注释，在 == <code>注释中</code>  == 添加他的 <code>平台标识</code> ，以 <code>#ifdef</code>  开头，以 <code>#endif</code>  结尾。</p>\n<h1 id=\"24导航跳转\"><a class=\"anchor\" href=\"#24导航跳转\">#</a> 24. 导航跳转</h1>\n<p>有声明式导航和编程式导航。</p>\n<p>声明式：直接用 <code>navogator</code>  标签来跳转，</p>\n<p>编程式：给当前需要跳转的图片、文字、按钮一个方法，在方法中写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在起始页面跳转到 test.vue 页面并传递参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uni<span class=\"token punctuation\">.</span><span class=\"token function\">navigateTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'test?id=1&amp;name=uniapp'</span> <span class=\"token comment\">// 需要跳转的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>跳转时传参数，只需在 url 后面，用 <code>问号？</code> + 需要传递过去的 “参数名”=“参数值”，多个参数用 <code>&amp;</code>  隔开。例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url<span class=\"token operator\">:</span><span class=\"token string\">'/pages/detail/detail?id=80&amp;age=20'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 跳转时，传递一个 id 等于 80 和 age 等于 20 的值过去</span></pre></td></tr></table></figure><p>在传过去以后，接受页面跳转传过来的参数保存在 <code>onLoad</code>  生命周期函数参数中的 <code>options</code>  中，例子如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>expord defaule <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"25组件中的生命周期函数\"><a class=\"anchor\" href=\"#25组件中的生命周期函数\">#</a> 25. 组件中的生命周期函数</h1>\n<p>和 vue 中的一样。但是，其中页面数据发生改变之前，和页面数据发生改变之后两个生命周期函数只在安卓程序中能使用。</p>\n",
            "tags": [
                "历练ing",
                "扩展知识",
                "Uni-app",
                "Uni-app"
            ]
        }
    ]
}